/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1alpha1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_v1 "k8s.io/kubernetes/pkg/api/v1"
	pkg1_v1 "k8s.io/kubernetes/pkg/apis/meta/v1"
	pkg4_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg2_v1.ObjectMeta
		var v1 pkg1_v1.TypeMeta
		var v2 pkg4_runtime.RawExtension
		var v3 pkg3_types.UID
		var v4 time.Time
		_, _, _, _, _ = v0, v1, v2, v3, v4
	}
}

func (x *Broker) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Kind != ""
			yyq2[1] = x.APIVersion != ""
			yyq2[2] = true
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yy10 := &x.ObjectMeta
					yy10.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy11 := &x.ObjectMeta
					yy11.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy13 := &x.Spec
				yy13.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("spec"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy14 := &x.Spec
				yy14.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy16 := &x.Status
				yy16.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy17 := &x.Status
				yy17.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Broker) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym18 := z.DecBinary()
	_ = yym18
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct19 := r.ContainerType()
		if yyct19 == codecSelferValueTypeMap1234 {
			yyl19 := r.ReadMapStart()
			if yyl19 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl19, d)
			}
		} else if yyct19 == codecSelferValueTypeArray1234 {
			yyl19 := r.ReadArrayStart()
			if yyl19 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl19, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Broker) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys20Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys20Slc
	var yyhl20 bool = l >= 0
	for yyj20 := 0; ; yyj20++ {
		if yyhl20 {
			if yyj20 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys20Slc = r.DecodeBytes(yys20Slc, true, true)
		yys20 := string(yys20Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys20 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv23 := &x.ObjectMeta
				yyv23.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = BrokerSpec{}
			} else {
				yyv24 := &x.Spec
				yyv24.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = BrokerStatus{}
			} else {
				yyv25 := &x.Status
				yyv25.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys20)
		} // end switch yys20
	} // end for yyj20
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Broker) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv29 := &x.ObjectMeta
		yyv29.CodecDecodeSelf(d)
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = BrokerSpec{}
	} else {
		yyv30 := &x.Spec
		yyv30.CodecDecodeSelf(d)
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = BrokerStatus{}
	} else {
		yyv31 := &x.Status
		yyv31.CodecDecodeSelf(d)
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BrokerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym32 := z.EncBinary()
		_ = yym32
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep33 := !z.EncBinary()
			yy2arr33 := z.EncBasicHandle().StructToArray
			var yyq33 [4]bool
			_, _, _ = yysep33, yyq33, yy2arr33
			const yyr33 bool = false
			yyq33[0] = x.Kind != ""
			yyq33[1] = x.APIVersion != ""
			yyq33[2] = true
			var yynn33 int
			if yyr33 || yy2arr33 {
				r.EncodeArrayStart(4)
			} else {
				yynn33 = 1
				for _, b := range yyq33 {
					if b {
						yynn33++
					}
				}
				r.EncodeMapStart(yynn33)
				yynn33 = 0
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq33[0] {
					yym35 := z.EncBinary()
					_ = yym35
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq33[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym36 := z.EncBinary()
					_ = yym36
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq33[1] {
					yym38 := z.EncBinary()
					_ = yym38
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq33[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym39 := z.EncBinary()
					_ = yym39
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq33[2] {
					yy41 := &x.ListMeta
					yym42 := z.EncBinary()
					_ = yym42
					if false {
					} else if z.HasExtensions() && z.EncExt(yy41) {
					} else {
						z.EncFallback(yy41)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq33[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy43 := &x.ListMeta
					yym44 := z.EncBinary()
					_ = yym44
					if false {
					} else if z.HasExtensions() && z.EncExt(yy43) {
					} else {
						z.EncFallback(yy43)
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym46 := z.EncBinary()
					_ = yym46
					if false {
					} else {
						h.encSliceBroker(([]Broker)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym47 := z.EncBinary()
					_ = yym47
					if false {
					} else {
						h.encSliceBroker(([]Broker)(x.Items), e)
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BrokerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym48 := z.DecBinary()
	_ = yym48
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct49 := r.ContainerType()
		if yyct49 == codecSelferValueTypeMap1234 {
			yyl49 := r.ReadMapStart()
			if yyl49 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl49, d)
			}
		} else if yyct49 == codecSelferValueTypeArray1234 {
			yyl49 := r.ReadArrayStart()
			if yyl49 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl49, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BrokerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys50Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys50Slc
	var yyhl50 bool = l >= 0
	for yyj50 := 0; ; yyj50++ {
		if yyhl50 {
			if yyj50 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys50Slc = r.DecodeBytes(yys50Slc, true, true)
		yys50 := string(yys50Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys50 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv53 := &x.ListMeta
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv55 := &x.Items
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else {
					h.decSliceBroker((*[]Broker)(yyv55), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys50)
		} // end switch yys50
	} // end for yyj50
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BrokerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj57 int
	var yyb57 bool
	var yyhl57 bool = l >= 0
	yyj57++
	if yyhl57 {
		yyb57 = yyj57 > l
	} else {
		yyb57 = r.CheckBreak()
	}
	if yyb57 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj57++
	if yyhl57 {
		yyb57 = yyj57 > l
	} else {
		yyb57 = r.CheckBreak()
	}
	if yyb57 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj57++
	if yyhl57 {
		yyb57 = yyj57 > l
	} else {
		yyb57 = r.CheckBreak()
	}
	if yyb57 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv60 := &x.ListMeta
		yym61 := z.DecBinary()
		_ = yym61
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv60) {
		} else {
			z.DecFallback(yyv60, false)
		}
	}
	yyj57++
	if yyhl57 {
		yyb57 = yyj57 > l
	} else {
		yyb57 = r.CheckBreak()
	}
	if yyb57 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv62 := &x.Items
		yym63 := z.DecBinary()
		_ = yym63
		if false {
		} else {
			h.decSliceBroker((*[]Broker)(yyv62), d)
		}
	}
	for {
		yyj57++
		if yyhl57 {
			yyb57 = yyj57 > l
		} else {
			yyb57 = r.CheckBreak()
		}
		if yyb57 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj57-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BrokerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym64 := z.EncBinary()
		_ = yym64
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep65 := !z.EncBinary()
			yy2arr65 := z.EncBasicHandle().StructToArray
			var yyq65 [2]bool
			_, _, _ = yysep65, yyq65, yy2arr65
			const yyr65 bool = false
			yyq65[1] = x.AuthSecret != nil
			var yynn65 int
			if yyr65 || yy2arr65 {
				r.EncodeArrayStart(2)
			} else {
				yynn65 = 1
				for _, b := range yyq65 {
					if b {
						yynn65++
					}
				}
				r.EncodeMapStart(yynn65)
				yynn65 = 0
			}
			if yyr65 || yy2arr65 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym67 := z.EncBinary()
				_ = yym67
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.URL))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("url"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym68 := z.EncBinary()
				_ = yym68
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.URL))
				}
			}
			if yyr65 || yy2arr65 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq65[1] {
					if x.AuthSecret == nil {
						r.EncodeNil()
					} else {
						x.AuthSecret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq65[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("authSecret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AuthSecret == nil {
						r.EncodeNil()
					} else {
						x.AuthSecret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr65 || yy2arr65 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BrokerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym70 := z.DecBinary()
	_ = yym70
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct71 := r.ContainerType()
		if yyct71 == codecSelferValueTypeMap1234 {
			yyl71 := r.ReadMapStart()
			if yyl71 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl71, d)
			}
		} else if yyct71 == codecSelferValueTypeArray1234 {
			yyl71 := r.ReadArrayStart()
			if yyl71 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl71, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BrokerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys72Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys72Slc
	var yyhl72 bool = l >= 0
	for yyj72 := 0; ; yyj72++ {
		if yyhl72 {
			if yyj72 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys72Slc = r.DecodeBytes(yys72Slc, true, true)
		yys72 := string(yys72Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys72 {
		case "url":
			if r.TryDecodeAsNil() {
				x.URL = ""
			} else {
				x.URL = string(r.DecodeString())
			}
		case "authSecret":
			if r.TryDecodeAsNil() {
				if x.AuthSecret != nil {
					x.AuthSecret = nil
				}
			} else {
				if x.AuthSecret == nil {
					x.AuthSecret = new(pkg2_v1.ObjectReference)
				}
				x.AuthSecret.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys72)
		} // end switch yys72
	} // end for yyj72
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BrokerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj75 int
	var yyb75 bool
	var yyhl75 bool = l >= 0
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.URL = ""
	} else {
		x.URL = string(r.DecodeString())
	}
	yyj75++
	if yyhl75 {
		yyb75 = yyj75 > l
	} else {
		yyb75 = r.CheckBreak()
	}
	if yyb75 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AuthSecret != nil {
			x.AuthSecret = nil
		}
	} else {
		if x.AuthSecret == nil {
			x.AuthSecret = new(pkg2_v1.ObjectReference)
		}
		x.AuthSecret.CodecDecodeSelf(d)
	}
	for {
		yyj75++
		if yyhl75 {
			yyb75 = yyj75 > l
		} else {
			yyb75 = r.CheckBreak()
		}
		if yyb75 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj75-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BrokerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym78 := z.EncBinary()
		_ = yym78
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep79 := !z.EncBinary()
			yy2arr79 := z.EncBasicHandle().StructToArray
			var yyq79 [1]bool
			_, _, _ = yysep79, yyq79, yy2arr79
			const yyr79 bool = false
			var yynn79 int
			if yyr79 || yy2arr79 {
				r.EncodeArrayStart(1)
			} else {
				yynn79 = 1
				for _, b := range yyq79 {
					if b {
						yynn79++
					}
				}
				r.EncodeMapStart(yynn79)
				yynn79 = 0
			}
			if yyr79 || yy2arr79 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym81 := z.EncBinary()
					_ = yym81
					if false {
					} else {
						h.encSliceBrokerCondition(([]BrokerCondition)(x.Conditions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("conditions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym82 := z.EncBinary()
					_ = yym82
					if false {
					} else {
						h.encSliceBrokerCondition(([]BrokerCondition)(x.Conditions), e)
					}
				}
			}
			if yyr79 || yy2arr79 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BrokerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym83 := z.DecBinary()
	_ = yym83
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct84 := r.ContainerType()
		if yyct84 == codecSelferValueTypeMap1234 {
			yyl84 := r.ReadMapStart()
			if yyl84 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl84, d)
			}
		} else if yyct84 == codecSelferValueTypeArray1234 {
			yyl84 := r.ReadArrayStart()
			if yyl84 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl84, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BrokerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys85Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys85Slc
	var yyhl85 bool = l >= 0
	for yyj85 := 0; ; yyj85++ {
		if yyhl85 {
			if yyj85 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys85Slc = r.DecodeBytes(yys85Slc, true, true)
		yys85 := string(yys85Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys85 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv86 := &x.Conditions
				yym87 := z.DecBinary()
				_ = yym87
				if false {
				} else {
					h.decSliceBrokerCondition((*[]BrokerCondition)(yyv86), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys85)
		} // end switch yys85
	} // end for yyj85
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BrokerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj88 int
	var yyb88 bool
	var yyhl88 bool = l >= 0
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv89 := &x.Conditions
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			h.decSliceBrokerCondition((*[]BrokerCondition)(yyv89), d)
		}
	}
	for {
		yyj88++
		if yyhl88 {
			yyb88 = yyj88 > l
		} else {
			yyb88 = r.CheckBreak()
		}
		if yyb88 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj88-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BrokerCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym91 := z.EncBinary()
		_ = yym91
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep92 := !z.EncBinary()
			yy2arr92 := z.EncBasicHandle().StructToArray
			var yyq92 [4]bool
			_, _, _ = yysep92, yyq92, yy2arr92
			const yyr92 bool = false
			var yynn92 int
			if yyr92 || yy2arr92 {
				r.EncodeArrayStart(4)
			} else {
				yynn92 = 4
				for _, b := range yyq92 {
					if b {
						yynn92++
					}
				}
				r.EncodeMapStart(yynn92)
				yynn92 = 0
			}
			if yyr92 || yy2arr92 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr92 || yy2arr92 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr92 || yy2arr92 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym96 := z.EncBinary()
				_ = yym96
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("reason"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym97 := z.EncBinary()
				_ = yym97
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			}
			if yyr92 || yy2arr92 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym99 := z.EncBinary()
				_ = yym99
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("message"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym100 := z.EncBinary()
				_ = yym100
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			}
			if yyr92 || yy2arr92 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BrokerCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym101 := z.DecBinary()
	_ = yym101
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct102 := r.ContainerType()
		if yyct102 == codecSelferValueTypeMap1234 {
			yyl102 := r.ReadMapStart()
			if yyl102 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl102, d)
			}
		} else if yyct102 == codecSelferValueTypeArray1234 {
			yyl102 := r.ReadArrayStart()
			if yyl102 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl102, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BrokerCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys103Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys103Slc
	var yyhl103 bool = l >= 0
	for yyj103 := 0; ; yyj103++ {
		if yyhl103 {
			if yyj103 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys103Slc = r.DecodeBytes(yys103Slc, true, true)
		yys103 := string(yys103Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys103 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = BrokerConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys103)
		} // end switch yys103
	} // end for yyj103
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BrokerCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj108 int
	var yyb108 bool
	var yyhl108 bool = l >= 0
	yyj108++
	if yyhl108 {
		yyb108 = yyj108 > l
	} else {
		yyb108 = r.CheckBreak()
	}
	if yyb108 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = BrokerConditionType(r.DecodeString())
	}
	yyj108++
	if yyhl108 {
		yyb108 = yyj108 > l
	} else {
		yyb108 = r.CheckBreak()
	}
	if yyb108 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj108++
	if yyhl108 {
		yyb108 = yyj108 > l
	} else {
		yyb108 = r.CheckBreak()
	}
	if yyb108 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj108++
	if yyhl108 {
		yyb108 = yyj108 > l
	} else {
		yyb108 = r.CheckBreak()
	}
	if yyb108 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj108++
		if yyhl108 {
			yyb108 = yyj108 > l
		} else {
			yyb108 = r.CheckBreak()
		}
		if yyb108 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj108-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x BrokerConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym113 := z.EncBinary()
	_ = yym113
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *BrokerConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym114 := z.DecBinary()
	_ = yym114
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym115 := z.EncBinary()
	_ = yym115
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym116 := z.DecBinary()
	_ = yym116
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceClassList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym117 := z.EncBinary()
		_ = yym117
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep118 := !z.EncBinary()
			yy2arr118 := z.EncBasicHandle().StructToArray
			var yyq118 [4]bool
			_, _, _ = yysep118, yyq118, yy2arr118
			const yyr118 bool = false
			yyq118[0] = x.Kind != ""
			yyq118[1] = x.APIVersion != ""
			yyq118[2] = true
			var yynn118 int
			if yyr118 || yy2arr118 {
				r.EncodeArrayStart(4)
			} else {
				yynn118 = 1
				for _, b := range yyq118 {
					if b {
						yynn118++
					}
				}
				r.EncodeMapStart(yynn118)
				yynn118 = 0
			}
			if yyr118 || yy2arr118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq118[0] {
					yym120 := z.EncBinary()
					_ = yym120
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq118[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym121 := z.EncBinary()
					_ = yym121
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr118 || yy2arr118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq118[1] {
					yym123 := z.EncBinary()
					_ = yym123
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq118[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym124 := z.EncBinary()
					_ = yym124
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr118 || yy2arr118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq118[2] {
					yy126 := &x.ListMeta
					yym127 := z.EncBinary()
					_ = yym127
					if false {
					} else if z.HasExtensions() && z.EncExt(yy126) {
					} else {
						z.EncFallback(yy126)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq118[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy128 := &x.ListMeta
					yym129 := z.EncBinary()
					_ = yym129
					if false {
					} else if z.HasExtensions() && z.EncExt(yy128) {
					} else {
						z.EncFallback(yy128)
					}
				}
			}
			if yyr118 || yy2arr118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym131 := z.EncBinary()
					_ = yym131
					if false {
					} else {
						h.encSliceServiceClass(([]ServiceClass)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym132 := z.EncBinary()
					_ = yym132
					if false {
					} else {
						h.encSliceServiceClass(([]ServiceClass)(x.Items), e)
					}
				}
			}
			if yyr118 || yy2arr118 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceClassList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym133 := z.DecBinary()
	_ = yym133
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct134 := r.ContainerType()
		if yyct134 == codecSelferValueTypeMap1234 {
			yyl134 := r.ReadMapStart()
			if yyl134 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl134, d)
			}
		} else if yyct134 == codecSelferValueTypeArray1234 {
			yyl134 := r.ReadArrayStart()
			if yyl134 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl134, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceClassList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys135Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys135Slc
	var yyhl135 bool = l >= 0
	for yyj135 := 0; ; yyj135++ {
		if yyhl135 {
			if yyj135 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys135Slc = r.DecodeBytes(yys135Slc, true, true)
		yys135 := string(yys135Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys135 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv138 := &x.ListMeta
				yym139 := z.DecBinary()
				_ = yym139
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv138) {
				} else {
					z.DecFallback(yyv138, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv140 := &x.Items
				yym141 := z.DecBinary()
				_ = yym141
				if false {
				} else {
					h.decSliceServiceClass((*[]ServiceClass)(yyv140), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys135)
		} // end switch yys135
	} // end for yyj135
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceClassList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj142 int
	var yyb142 bool
	var yyhl142 bool = l >= 0
	yyj142++
	if yyhl142 {
		yyb142 = yyj142 > l
	} else {
		yyb142 = r.CheckBreak()
	}
	if yyb142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj142++
	if yyhl142 {
		yyb142 = yyj142 > l
	} else {
		yyb142 = r.CheckBreak()
	}
	if yyb142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj142++
	if yyhl142 {
		yyb142 = yyj142 > l
	} else {
		yyb142 = r.CheckBreak()
	}
	if yyb142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv145 := &x.ListMeta
		yym146 := z.DecBinary()
		_ = yym146
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv145) {
		} else {
			z.DecFallback(yyv145, false)
		}
	}
	yyj142++
	if yyhl142 {
		yyb142 = yyj142 > l
	} else {
		yyb142 = r.CheckBreak()
	}
	if yyb142 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv147 := &x.Items
		yym148 := z.DecBinary()
		_ = yym148
		if false {
		} else {
			h.decSliceServiceClass((*[]ServiceClass)(yyv147), d)
		}
	}
	for {
		yyj142++
		if yyhl142 {
			yyb142 = yyj142 > l
		} else {
			yyb142 = r.CheckBreak()
		}
		if yyb142 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj142-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceClass) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym149 := z.EncBinary()
		_ = yym149
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep150 := !z.EncBinary()
			yy2arr150 := z.EncBasicHandle().StructToArray
			var yyq150 [21]bool
			_, _, _ = yysep150, yyq150, yy2arr150
			const yyr150 bool = false
			yyq150[0] = x.Kind != ""
			yyq150[1] = x.APIVersion != ""
			yyq150[2] = true
			yyq150[8] = len(x.OSBTags) != 0
			yyq150[9] = len(x.OSBRequires) != 0
			yyq150[10] = x.OSBMaxDBPerNode != nil
			yyq150[11] = x.OSBDashboardOAuth2ClientID != nil
			yyq150[12] = x.OSBDashboardSecret != nil
			yyq150[13] = x.OSBDashboardRedirectURI != nil
			yyq150[14] = x.Description != nil
			yyq150[15] = x.DisplayName != nil
			yyq150[16] = x.ImageURL != nil
			yyq150[17] = x.LongDescription != nil
			yyq150[18] = x.ProviderDisplayName != nil
			yyq150[19] = x.DocumentationURL != nil
			yyq150[20] = x.SupportURL != nil
			var yynn150 int
			if yyr150 || yy2arr150 {
				r.EncodeArrayStart(21)
			} else {
				yynn150 = 5
				for _, b := range yyq150 {
					if b {
						yynn150++
					}
				}
				r.EncodeMapStart(yynn150)
				yynn150 = 0
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[0] {
					yym152 := z.EncBinary()
					_ = yym152
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq150[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym153 := z.EncBinary()
					_ = yym153
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[1] {
					yym155 := z.EncBinary()
					_ = yym155
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq150[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym156 := z.EncBinary()
					_ = yym156
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[2] {
					yy158 := &x.ObjectMeta
					yy158.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy159 := &x.ObjectMeta
					yy159.CodecEncodeSelf(e)
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym161 := z.EncBinary()
				_ = yym161
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BrokerName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("brokerName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym162 := z.EncBinary()
				_ = yym162
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BrokerName))
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym164 := z.EncBinary()
				_ = yym164
				if false {
				} else {
					r.EncodeBool(bool(x.Bindable))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bindable"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym165 := z.EncBinary()
				_ = yym165
				if false {
				} else {
					r.EncodeBool(bool(x.Bindable))
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Plans == nil {
					r.EncodeNil()
				} else {
					yym167 := z.EncBinary()
					_ = yym167
					if false {
					} else {
						h.encSliceServicePlan(([]ServicePlan)(x.Plans), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("plans"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Plans == nil {
					r.EncodeNil()
				} else {
					yym168 := z.EncBinary()
					_ = yym168
					if false {
					} else {
						h.encSliceServicePlan(([]ServicePlan)(x.Plans), e)
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym170 := z.EncBinary()
				_ = yym170
				if false {
				} else {
					r.EncodeBool(bool(x.PlanUpdatable))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("planUpdatable"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym171 := z.EncBinary()
				_ = yym171
				if false {
				} else {
					r.EncodeBool(bool(x.PlanUpdatable))
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym173 := z.EncBinary()
				_ = yym173
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbGuid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym174 := z.EncBinary()
				_ = yym174
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[8] {
					if x.OSBTags == nil {
						r.EncodeNil()
					} else {
						yym176 := z.EncBinary()
						_ = yym176
						if false {
						} else {
							z.F.EncSliceStringV(x.OSBTags, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("osbTags"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OSBTags == nil {
						r.EncodeNil()
					} else {
						yym177 := z.EncBinary()
						_ = yym177
						if false {
						} else {
							z.F.EncSliceStringV(x.OSBTags, false, e)
						}
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[9] {
					if x.OSBRequires == nil {
						r.EncodeNil()
					} else {
						yym179 := z.EncBinary()
						_ = yym179
						if false {
						} else {
							z.F.EncSliceStringV(x.OSBRequires, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("osbRequires"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OSBRequires == nil {
						r.EncodeNil()
					} else {
						yym180 := z.EncBinary()
						_ = yym180
						if false {
						} else {
							z.F.EncSliceStringV(x.OSBRequires, false, e)
						}
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[10] {
					if x.OSBMaxDBPerNode == nil {
						r.EncodeNil()
					} else {
						yy182 := *x.OSBMaxDBPerNode
						yym183 := z.EncBinary()
						_ = yym183
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy182))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("osbMaxDBPerNode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OSBMaxDBPerNode == nil {
						r.EncodeNil()
					} else {
						yy184 := *x.OSBMaxDBPerNode
						yym185 := z.EncBinary()
						_ = yym185
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy184))
						}
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[11] {
					if x.OSBDashboardOAuth2ClientID == nil {
						r.EncodeNil()
					} else {
						yy187 := *x.OSBDashboardOAuth2ClientID
						yym188 := z.EncBinary()
						_ = yym188
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy187))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("osbDashboardOAuth2ClientID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OSBDashboardOAuth2ClientID == nil {
						r.EncodeNil()
					} else {
						yy189 := *x.OSBDashboardOAuth2ClientID
						yym190 := z.EncBinary()
						_ = yym190
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy189))
						}
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[12] {
					if x.OSBDashboardSecret == nil {
						r.EncodeNil()
					} else {
						yy192 := *x.OSBDashboardSecret
						yym193 := z.EncBinary()
						_ = yym193
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy192))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("osbDashboardSecret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OSBDashboardSecret == nil {
						r.EncodeNil()
					} else {
						yy194 := *x.OSBDashboardSecret
						yym195 := z.EncBinary()
						_ = yym195
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy194))
						}
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[13] {
					if x.OSBDashboardRedirectURI == nil {
						r.EncodeNil()
					} else {
						yy197 := *x.OSBDashboardRedirectURI
						yym198 := z.EncBinary()
						_ = yym198
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy197))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("osbDashboardRedirectURI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OSBDashboardRedirectURI == nil {
						r.EncodeNil()
					} else {
						yy199 := *x.OSBDashboardRedirectURI
						yym200 := z.EncBinary()
						_ = yym200
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy199))
						}
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[14] {
					if x.Description == nil {
						r.EncodeNil()
					} else {
						yy202 := *x.Description
						yym203 := z.EncBinary()
						_ = yym203
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy202))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Description == nil {
						r.EncodeNil()
					} else {
						yy204 := *x.Description
						yym205 := z.EncBinary()
						_ = yym205
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy204))
						}
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[15] {
					if x.DisplayName == nil {
						r.EncodeNil()
					} else {
						yy207 := *x.DisplayName
						yym208 := z.EncBinary()
						_ = yym208
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy207))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("displayName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DisplayName == nil {
						r.EncodeNil()
					} else {
						yy209 := *x.DisplayName
						yym210 := z.EncBinary()
						_ = yym210
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy209))
						}
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[16] {
					if x.ImageURL == nil {
						r.EncodeNil()
					} else {
						yy212 := *x.ImageURL
						yym213 := z.EncBinary()
						_ = yym213
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy212))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imageUrl"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImageURL == nil {
						r.EncodeNil()
					} else {
						yy214 := *x.ImageURL
						yym215 := z.EncBinary()
						_ = yym215
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy214))
						}
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[17] {
					if x.LongDescription == nil {
						r.EncodeNil()
					} else {
						yy217 := *x.LongDescription
						yym218 := z.EncBinary()
						_ = yym218
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy217))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("longDescription"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LongDescription == nil {
						r.EncodeNil()
					} else {
						yy219 := *x.LongDescription
						yym220 := z.EncBinary()
						_ = yym220
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy219))
						}
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[18] {
					if x.ProviderDisplayName == nil {
						r.EncodeNil()
					} else {
						yy222 := *x.ProviderDisplayName
						yym223 := z.EncBinary()
						_ = yym223
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy222))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerDisplayName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ProviderDisplayName == nil {
						r.EncodeNil()
					} else {
						yy224 := *x.ProviderDisplayName
						yym225 := z.EncBinary()
						_ = yym225
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy224))
						}
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[19] {
					if x.DocumentationURL == nil {
						r.EncodeNil()
					} else {
						yy227 := *x.DocumentationURL
						yym228 := z.EncBinary()
						_ = yym228
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy227))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("documentationUrl"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DocumentationURL == nil {
						r.EncodeNil()
					} else {
						yy229 := *x.DocumentationURL
						yym230 := z.EncBinary()
						_ = yym230
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy229))
						}
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq150[20] {
					if x.SupportURL == nil {
						r.EncodeNil()
					} else {
						yy232 := *x.SupportURL
						yym233 := z.EncBinary()
						_ = yym233
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy232))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq150[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supportUrl"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupportURL == nil {
						r.EncodeNil()
					} else {
						yy234 := *x.SupportURL
						yym235 := z.EncBinary()
						_ = yym235
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy234))
						}
					}
				}
			}
			if yyr150 || yy2arr150 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceClass) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym236 := z.DecBinary()
	_ = yym236
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct237 := r.ContainerType()
		if yyct237 == codecSelferValueTypeMap1234 {
			yyl237 := r.ReadMapStart()
			if yyl237 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl237, d)
			}
		} else if yyct237 == codecSelferValueTypeArray1234 {
			yyl237 := r.ReadArrayStart()
			if yyl237 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl237, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceClass) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys238Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys238Slc
	var yyhl238 bool = l >= 0
	for yyj238 := 0; ; yyj238++ {
		if yyhl238 {
			if yyj238 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys238Slc = r.DecodeBytes(yys238Slc, true, true)
		yys238 := string(yys238Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys238 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv241 := &x.ObjectMeta
				yyv241.CodecDecodeSelf(d)
			}
		case "brokerName":
			if r.TryDecodeAsNil() {
				x.BrokerName = ""
			} else {
				x.BrokerName = string(r.DecodeString())
			}
		case "bindable":
			if r.TryDecodeAsNil() {
				x.Bindable = false
			} else {
				x.Bindable = bool(r.DecodeBool())
			}
		case "plans":
			if r.TryDecodeAsNil() {
				x.Plans = nil
			} else {
				yyv244 := &x.Plans
				yym245 := z.DecBinary()
				_ = yym245
				if false {
				} else {
					h.decSliceServicePlan((*[]ServicePlan)(yyv244), d)
				}
			}
		case "planUpdatable":
			if r.TryDecodeAsNil() {
				x.PlanUpdatable = false
			} else {
				x.PlanUpdatable = bool(r.DecodeBool())
			}
		case "osbGuid":
			if r.TryDecodeAsNil() {
				x.OSBGUID = ""
			} else {
				x.OSBGUID = string(r.DecodeString())
			}
		case "osbTags":
			if r.TryDecodeAsNil() {
				x.OSBTags = nil
			} else {
				yyv248 := &x.OSBTags
				yym249 := z.DecBinary()
				_ = yym249
				if false {
				} else {
					z.F.DecSliceStringX(yyv248, false, d)
				}
			}
		case "osbRequires":
			if r.TryDecodeAsNil() {
				x.OSBRequires = nil
			} else {
				yyv250 := &x.OSBRequires
				yym251 := z.DecBinary()
				_ = yym251
				if false {
				} else {
					z.F.DecSliceStringX(yyv250, false, d)
				}
			}
		case "osbMaxDBPerNode":
			if r.TryDecodeAsNil() {
				if x.OSBMaxDBPerNode != nil {
					x.OSBMaxDBPerNode = nil
				}
			} else {
				if x.OSBMaxDBPerNode == nil {
					x.OSBMaxDBPerNode = new(string)
				}
				yym253 := z.DecBinary()
				_ = yym253
				if false {
				} else {
					*((*string)(x.OSBMaxDBPerNode)) = r.DecodeString()
				}
			}
		case "osbDashboardOAuth2ClientID":
			if r.TryDecodeAsNil() {
				if x.OSBDashboardOAuth2ClientID != nil {
					x.OSBDashboardOAuth2ClientID = nil
				}
			} else {
				if x.OSBDashboardOAuth2ClientID == nil {
					x.OSBDashboardOAuth2ClientID = new(string)
				}
				yym255 := z.DecBinary()
				_ = yym255
				if false {
				} else {
					*((*string)(x.OSBDashboardOAuth2ClientID)) = r.DecodeString()
				}
			}
		case "osbDashboardSecret":
			if r.TryDecodeAsNil() {
				if x.OSBDashboardSecret != nil {
					x.OSBDashboardSecret = nil
				}
			} else {
				if x.OSBDashboardSecret == nil {
					x.OSBDashboardSecret = new(string)
				}
				yym257 := z.DecBinary()
				_ = yym257
				if false {
				} else {
					*((*string)(x.OSBDashboardSecret)) = r.DecodeString()
				}
			}
		case "osbDashboardRedirectURI":
			if r.TryDecodeAsNil() {
				if x.OSBDashboardRedirectURI != nil {
					x.OSBDashboardRedirectURI = nil
				}
			} else {
				if x.OSBDashboardRedirectURI == nil {
					x.OSBDashboardRedirectURI = new(string)
				}
				yym259 := z.DecBinary()
				_ = yym259
				if false {
				} else {
					*((*string)(x.OSBDashboardRedirectURI)) = r.DecodeString()
				}
			}
		case "description":
			if r.TryDecodeAsNil() {
				if x.Description != nil {
					x.Description = nil
				}
			} else {
				if x.Description == nil {
					x.Description = new(string)
				}
				yym261 := z.DecBinary()
				_ = yym261
				if false {
				} else {
					*((*string)(x.Description)) = r.DecodeString()
				}
			}
		case "displayName":
			if r.TryDecodeAsNil() {
				if x.DisplayName != nil {
					x.DisplayName = nil
				}
			} else {
				if x.DisplayName == nil {
					x.DisplayName = new(string)
				}
				yym263 := z.DecBinary()
				_ = yym263
				if false {
				} else {
					*((*string)(x.DisplayName)) = r.DecodeString()
				}
			}
		case "imageUrl":
			if r.TryDecodeAsNil() {
				if x.ImageURL != nil {
					x.ImageURL = nil
				}
			} else {
				if x.ImageURL == nil {
					x.ImageURL = new(string)
				}
				yym265 := z.DecBinary()
				_ = yym265
				if false {
				} else {
					*((*string)(x.ImageURL)) = r.DecodeString()
				}
			}
		case "longDescription":
			if r.TryDecodeAsNil() {
				if x.LongDescription != nil {
					x.LongDescription = nil
				}
			} else {
				if x.LongDescription == nil {
					x.LongDescription = new(string)
				}
				yym267 := z.DecBinary()
				_ = yym267
				if false {
				} else {
					*((*string)(x.LongDescription)) = r.DecodeString()
				}
			}
		case "providerDisplayName":
			if r.TryDecodeAsNil() {
				if x.ProviderDisplayName != nil {
					x.ProviderDisplayName = nil
				}
			} else {
				if x.ProviderDisplayName == nil {
					x.ProviderDisplayName = new(string)
				}
				yym269 := z.DecBinary()
				_ = yym269
				if false {
				} else {
					*((*string)(x.ProviderDisplayName)) = r.DecodeString()
				}
			}
		case "documentationUrl":
			if r.TryDecodeAsNil() {
				if x.DocumentationURL != nil {
					x.DocumentationURL = nil
				}
			} else {
				if x.DocumentationURL == nil {
					x.DocumentationURL = new(string)
				}
				yym271 := z.DecBinary()
				_ = yym271
				if false {
				} else {
					*((*string)(x.DocumentationURL)) = r.DecodeString()
				}
			}
		case "supportUrl":
			if r.TryDecodeAsNil() {
				if x.SupportURL != nil {
					x.SupportURL = nil
				}
			} else {
				if x.SupportURL == nil {
					x.SupportURL = new(string)
				}
				yym273 := z.DecBinary()
				_ = yym273
				if false {
				} else {
					*((*string)(x.SupportURL)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys238)
		} // end switch yys238
	} // end for yyj238
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceClass) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj274 int
	var yyb274 bool
	var yyhl274 bool = l >= 0
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv277 := &x.ObjectMeta
		yyv277.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BrokerName = ""
	} else {
		x.BrokerName = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Bindable = false
	} else {
		x.Bindable = bool(r.DecodeBool())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Plans = nil
	} else {
		yyv280 := &x.Plans
		yym281 := z.DecBinary()
		_ = yym281
		if false {
		} else {
			h.decSliceServicePlan((*[]ServicePlan)(yyv280), d)
		}
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PlanUpdatable = false
	} else {
		x.PlanUpdatable = bool(r.DecodeBool())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBGUID = ""
	} else {
		x.OSBGUID = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBTags = nil
	} else {
		yyv284 := &x.OSBTags
		yym285 := z.DecBinary()
		_ = yym285
		if false {
		} else {
			z.F.DecSliceStringX(yyv284, false, d)
		}
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBRequires = nil
	} else {
		yyv286 := &x.OSBRequires
		yym287 := z.DecBinary()
		_ = yym287
		if false {
		} else {
			z.F.DecSliceStringX(yyv286, false, d)
		}
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OSBMaxDBPerNode != nil {
			x.OSBMaxDBPerNode = nil
		}
	} else {
		if x.OSBMaxDBPerNode == nil {
			x.OSBMaxDBPerNode = new(string)
		}
		yym289 := z.DecBinary()
		_ = yym289
		if false {
		} else {
			*((*string)(x.OSBMaxDBPerNode)) = r.DecodeString()
		}
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OSBDashboardOAuth2ClientID != nil {
			x.OSBDashboardOAuth2ClientID = nil
		}
	} else {
		if x.OSBDashboardOAuth2ClientID == nil {
			x.OSBDashboardOAuth2ClientID = new(string)
		}
		yym291 := z.DecBinary()
		_ = yym291
		if false {
		} else {
			*((*string)(x.OSBDashboardOAuth2ClientID)) = r.DecodeString()
		}
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OSBDashboardSecret != nil {
			x.OSBDashboardSecret = nil
		}
	} else {
		if x.OSBDashboardSecret == nil {
			x.OSBDashboardSecret = new(string)
		}
		yym293 := z.DecBinary()
		_ = yym293
		if false {
		} else {
			*((*string)(x.OSBDashboardSecret)) = r.DecodeString()
		}
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OSBDashboardRedirectURI != nil {
			x.OSBDashboardRedirectURI = nil
		}
	} else {
		if x.OSBDashboardRedirectURI == nil {
			x.OSBDashboardRedirectURI = new(string)
		}
		yym295 := z.DecBinary()
		_ = yym295
		if false {
		} else {
			*((*string)(x.OSBDashboardRedirectURI)) = r.DecodeString()
		}
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Description != nil {
			x.Description = nil
		}
	} else {
		if x.Description == nil {
			x.Description = new(string)
		}
		yym297 := z.DecBinary()
		_ = yym297
		if false {
		} else {
			*((*string)(x.Description)) = r.DecodeString()
		}
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DisplayName != nil {
			x.DisplayName = nil
		}
	} else {
		if x.DisplayName == nil {
			x.DisplayName = new(string)
		}
		yym299 := z.DecBinary()
		_ = yym299
		if false {
		} else {
			*((*string)(x.DisplayName)) = r.DecodeString()
		}
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ImageURL != nil {
			x.ImageURL = nil
		}
	} else {
		if x.ImageURL == nil {
			x.ImageURL = new(string)
		}
		yym301 := z.DecBinary()
		_ = yym301
		if false {
		} else {
			*((*string)(x.ImageURL)) = r.DecodeString()
		}
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LongDescription != nil {
			x.LongDescription = nil
		}
	} else {
		if x.LongDescription == nil {
			x.LongDescription = new(string)
		}
		yym303 := z.DecBinary()
		_ = yym303
		if false {
		} else {
			*((*string)(x.LongDescription)) = r.DecodeString()
		}
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ProviderDisplayName != nil {
			x.ProviderDisplayName = nil
		}
	} else {
		if x.ProviderDisplayName == nil {
			x.ProviderDisplayName = new(string)
		}
		yym305 := z.DecBinary()
		_ = yym305
		if false {
		} else {
			*((*string)(x.ProviderDisplayName)) = r.DecodeString()
		}
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DocumentationURL != nil {
			x.DocumentationURL = nil
		}
	} else {
		if x.DocumentationURL == nil {
			x.DocumentationURL = new(string)
		}
		yym307 := z.DecBinary()
		_ = yym307
		if false {
		} else {
			*((*string)(x.DocumentationURL)) = r.DecodeString()
		}
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SupportURL != nil {
			x.SupportURL = nil
		}
	} else {
		if x.SupportURL == nil {
			x.SupportURL = new(string)
		}
		yym309 := z.DecBinary()
		_ = yym309
		if false {
		} else {
			*((*string)(x.SupportURL)) = r.DecodeString()
		}
	}
	for {
		yyj274++
		if yyhl274 {
			yyb274 = yyj274 > l
		} else {
			yyb274 = r.CheckBreak()
		}
		if yyb274 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj274-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePlan) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym310 := z.EncBinary()
		_ = yym310
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep311 := !z.EncBinary()
			yy2arr311 := z.EncBasicHandle().StructToArray
			var yyq311 [6]bool
			_, _, _ = yysep311, yyq311, yy2arr311
			const yyr311 bool = false
			yyq311[3] = x.Description != nil
			yyq311[4] = len(x.Bullets) != 0
			yyq311[5] = x.DisplayName != nil
			var yynn311 int
			if yyr311 || yy2arr311 {
				r.EncodeArrayStart(6)
			} else {
				yynn311 = 3
				for _, b := range yyq311 {
					if b {
						yynn311++
					}
				}
				r.EncodeMapStart(yynn311)
				yynn311 = 0
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym313 := z.EncBinary()
				_ = yym313
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym314 := z.EncBinary()
				_ = yym314
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym316 := z.EncBinary()
				_ = yym316
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbGuid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym317 := z.EncBinary()
				_ = yym317
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym319 := z.EncBinary()
				_ = yym319
				if false {
				} else {
					r.EncodeBool(bool(x.OSBFree))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbFree"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym320 := z.EncBinary()
				_ = yym320
				if false {
				} else {
					r.EncodeBool(bool(x.OSBFree))
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq311[3] {
					if x.Description == nil {
						r.EncodeNil()
					} else {
						yy322 := *x.Description
						yym323 := z.EncBinary()
						_ = yym323
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy322))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq311[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Description == nil {
						r.EncodeNil()
					} else {
						yy324 := *x.Description
						yym325 := z.EncBinary()
						_ = yym325
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy324))
						}
					}
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq311[4] {
					if x.Bullets == nil {
						r.EncodeNil()
					} else {
						yym327 := z.EncBinary()
						_ = yym327
						if false {
						} else {
							z.F.EncSliceStringV(x.Bullets, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq311[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("bullets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Bullets == nil {
						r.EncodeNil()
					} else {
						yym328 := z.EncBinary()
						_ = yym328
						if false {
						} else {
							z.F.EncSliceStringV(x.Bullets, false, e)
						}
					}
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq311[5] {
					if x.DisplayName == nil {
						r.EncodeNil()
					} else {
						yy330 := *x.DisplayName
						yym331 := z.EncBinary()
						_ = yym331
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy330))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq311[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("displayName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DisplayName == nil {
						r.EncodeNil()
					} else {
						yy332 := *x.DisplayName
						yym333 := z.EncBinary()
						_ = yym333
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy332))
						}
					}
				}
			}
			if yyr311 || yy2arr311 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePlan) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym334 := z.DecBinary()
	_ = yym334
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct335 := r.ContainerType()
		if yyct335 == codecSelferValueTypeMap1234 {
			yyl335 := r.ReadMapStart()
			if yyl335 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl335, d)
			}
		} else if yyct335 == codecSelferValueTypeArray1234 {
			yyl335 := r.ReadArrayStart()
			if yyl335 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl335, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePlan) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys336Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys336Slc
	var yyhl336 bool = l >= 0
	for yyj336 := 0; ; yyj336++ {
		if yyhl336 {
			if yyj336 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys336Slc = r.DecodeBytes(yys336Slc, true, true)
		yys336 := string(yys336Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys336 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "osbGuid":
			if r.TryDecodeAsNil() {
				x.OSBGUID = ""
			} else {
				x.OSBGUID = string(r.DecodeString())
			}
		case "osbFree":
			if r.TryDecodeAsNil() {
				x.OSBFree = false
			} else {
				x.OSBFree = bool(r.DecodeBool())
			}
		case "description":
			if r.TryDecodeAsNil() {
				if x.Description != nil {
					x.Description = nil
				}
			} else {
				if x.Description == nil {
					x.Description = new(string)
				}
				yym341 := z.DecBinary()
				_ = yym341
				if false {
				} else {
					*((*string)(x.Description)) = r.DecodeString()
				}
			}
		case "bullets":
			if r.TryDecodeAsNil() {
				x.Bullets = nil
			} else {
				yyv342 := &x.Bullets
				yym343 := z.DecBinary()
				_ = yym343
				if false {
				} else {
					z.F.DecSliceStringX(yyv342, false, d)
				}
			}
		case "displayName":
			if r.TryDecodeAsNil() {
				if x.DisplayName != nil {
					x.DisplayName = nil
				}
			} else {
				if x.DisplayName == nil {
					x.DisplayName = new(string)
				}
				yym345 := z.DecBinary()
				_ = yym345
				if false {
				} else {
					*((*string)(x.DisplayName)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys336)
		} // end switch yys336
	} // end for yyj336
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePlan) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj346 int
	var yyb346 bool
	var yyhl346 bool = l >= 0
	yyj346++
	if yyhl346 {
		yyb346 = yyj346 > l
	} else {
		yyb346 = r.CheckBreak()
	}
	if yyb346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj346++
	if yyhl346 {
		yyb346 = yyj346 > l
	} else {
		yyb346 = r.CheckBreak()
	}
	if yyb346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBGUID = ""
	} else {
		x.OSBGUID = string(r.DecodeString())
	}
	yyj346++
	if yyhl346 {
		yyb346 = yyj346 > l
	} else {
		yyb346 = r.CheckBreak()
	}
	if yyb346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBFree = false
	} else {
		x.OSBFree = bool(r.DecodeBool())
	}
	yyj346++
	if yyhl346 {
		yyb346 = yyj346 > l
	} else {
		yyb346 = r.CheckBreak()
	}
	if yyb346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Description != nil {
			x.Description = nil
		}
	} else {
		if x.Description == nil {
			x.Description = new(string)
		}
		yym351 := z.DecBinary()
		_ = yym351
		if false {
		} else {
			*((*string)(x.Description)) = r.DecodeString()
		}
	}
	yyj346++
	if yyhl346 {
		yyb346 = yyj346 > l
	} else {
		yyb346 = r.CheckBreak()
	}
	if yyb346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Bullets = nil
	} else {
		yyv352 := &x.Bullets
		yym353 := z.DecBinary()
		_ = yym353
		if false {
		} else {
			z.F.DecSliceStringX(yyv352, false, d)
		}
	}
	yyj346++
	if yyhl346 {
		yyb346 = yyj346 > l
	} else {
		yyb346 = r.CheckBreak()
	}
	if yyb346 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DisplayName != nil {
			x.DisplayName = nil
		}
	} else {
		if x.DisplayName == nil {
			x.DisplayName = new(string)
		}
		yym355 := z.DecBinary()
		_ = yym355
		if false {
		} else {
			*((*string)(x.DisplayName)) = r.DecodeString()
		}
	}
	for {
		yyj346++
		if yyhl346 {
			yyb346 = yyj346 > l
		} else {
			yyb346 = r.CheckBreak()
		}
		if yyb346 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj346-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym356 := z.EncBinary()
		_ = yym356
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep357 := !z.EncBinary()
			yy2arr357 := z.EncBasicHandle().StructToArray
			var yyq357 [4]bool
			_, _, _ = yysep357, yyq357, yy2arr357
			const yyr357 bool = false
			yyq357[0] = x.Kind != ""
			yyq357[1] = x.APIVersion != ""
			yyq357[2] = true
			var yynn357 int
			if yyr357 || yy2arr357 {
				r.EncodeArrayStart(4)
			} else {
				yynn357 = 1
				for _, b := range yyq357 {
					if b {
						yynn357++
					}
				}
				r.EncodeMapStart(yynn357)
				yynn357 = 0
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq357[0] {
					yym359 := z.EncBinary()
					_ = yym359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym360 := z.EncBinary()
					_ = yym360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq357[1] {
					yym362 := z.EncBinary()
					_ = yym362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym363 := z.EncBinary()
					_ = yym363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq357[2] {
					yy365 := &x.ListMeta
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else if z.HasExtensions() && z.EncExt(yy365) {
					} else {
						z.EncFallback(yy365)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq357[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy367 := &x.ListMeta
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else if z.HasExtensions() && z.EncExt(yy367) {
					} else {
						z.EncFallback(yy367)
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym370 := z.EncBinary()
					_ = yym370
					if false {
					} else {
						h.encSliceInstance(([]Instance)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						h.encSliceInstance(([]Instance)(x.Items), e)
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym372 := z.DecBinary()
	_ = yym372
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct373 := r.ContainerType()
		if yyct373 == codecSelferValueTypeMap1234 {
			yyl373 := r.ReadMapStart()
			if yyl373 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl373, d)
			}
		} else if yyct373 == codecSelferValueTypeArray1234 {
			yyl373 := r.ReadArrayStart()
			if yyl373 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl373, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys374Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys374Slc
	var yyhl374 bool = l >= 0
	for yyj374 := 0; ; yyj374++ {
		if yyhl374 {
			if yyj374 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys374Slc = r.DecodeBytes(yys374Slc, true, true)
		yys374 := string(yys374Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys374 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv377 := &x.ListMeta
				yym378 := z.DecBinary()
				_ = yym378
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv377) {
				} else {
					z.DecFallback(yyv377, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv379 := &x.Items
				yym380 := z.DecBinary()
				_ = yym380
				if false {
				} else {
					h.decSliceInstance((*[]Instance)(yyv379), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys374)
		} // end switch yys374
	} // end for yyj374
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj381 int
	var yyb381 bool
	var yyhl381 bool = l >= 0
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv384 := &x.ListMeta
		yym385 := z.DecBinary()
		_ = yym385
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv384) {
		} else {
			z.DecFallback(yyv384, false)
		}
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv386 := &x.Items
		yym387 := z.DecBinary()
		_ = yym387
		if false {
		} else {
			h.decSliceInstance((*[]Instance)(yyv386), d)
		}
	}
	for {
		yyj381++
		if yyhl381 {
			yyb381 = yyj381 > l
		} else {
			yyb381 = r.CheckBreak()
		}
		if yyb381 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj381-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Instance) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym388 := z.EncBinary()
		_ = yym388
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep389 := !z.EncBinary()
			yy2arr389 := z.EncBasicHandle().StructToArray
			var yyq389 [5]bool
			_, _, _ = yysep389, yyq389, yy2arr389
			const yyr389 bool = false
			yyq389[0] = x.Kind != ""
			yyq389[1] = x.APIVersion != ""
			yyq389[2] = true
			var yynn389 int
			if yyr389 || yy2arr389 {
				r.EncodeArrayStart(5)
			} else {
				yynn389 = 2
				for _, b := range yyq389 {
					if b {
						yynn389++
					}
				}
				r.EncodeMapStart(yynn389)
				yynn389 = 0
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[0] {
					yym391 := z.EncBinary()
					_ = yym391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym392 := z.EncBinary()
					_ = yym392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[1] {
					yym394 := z.EncBinary()
					_ = yym394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[2] {
					yy397 := &x.ObjectMeta
					yy397.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy398 := &x.ObjectMeta
					yy398.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy400 := &x.Spec
				yy400.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("spec"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy401 := &x.Spec
				yy401.CodecEncodeSelf(e)
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy403 := &x.Status
				yy403.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy404 := &x.Status
				yy404.CodecEncodeSelf(e)
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Instance) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym405 := z.DecBinary()
	_ = yym405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct406 := r.ContainerType()
		if yyct406 == codecSelferValueTypeMap1234 {
			yyl406 := r.ReadMapStart()
			if yyl406 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl406, d)
			}
		} else if yyct406 == codecSelferValueTypeArray1234 {
			yyl406 := r.ReadArrayStart()
			if yyl406 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl406, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Instance) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys407Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys407Slc
	var yyhl407 bool = l >= 0
	for yyj407 := 0; ; yyj407++ {
		if yyhl407 {
			if yyj407 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys407Slc = r.DecodeBytes(yys407Slc, true, true)
		yys407 := string(yys407Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys407 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv410 := &x.ObjectMeta
				yyv410.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = InstanceSpec{}
			} else {
				yyv411 := &x.Spec
				yyv411.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = InstanceStatus{}
			} else {
				yyv412 := &x.Status
				yyv412.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys407)
		} // end switch yys407
	} // end for yyj407
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Instance) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj413 int
	var yyb413 bool
	var yyhl413 bool = l >= 0
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv416 := &x.ObjectMeta
		yyv416.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = InstanceSpec{}
	} else {
		yyv417 := &x.Spec
		yyv417.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = InstanceStatus{}
	} else {
		yyv418 := &x.Status
		yyv418.CodecDecodeSelf(d)
	}
	for {
		yyj413++
		if yyhl413 {
			yyb413 = yyj413 > l
		} else {
			yyb413 = r.CheckBreak()
		}
		if yyb413 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj413-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym419 := z.EncBinary()
		_ = yym419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep420 := !z.EncBinary()
			yy2arr420 := z.EncBasicHandle().StructToArray
			var yyq420 [12]bool
			_, _, _ = yysep420, yyq420, yy2arr420
			const yyr420 bool = false
			yyq420[2] = x.Parameters != nil
			var yynn420 int
			if yyr420 || yy2arr420 {
				r.EncodeArrayStart(12)
			} else {
				yynn420 = 11
				for _, b := range yyq420 {
					if b {
						yynn420++
					}
				}
				r.EncodeMapStart(yynn420)
				yynn420 = 0
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym422 := z.EncBinary()
				_ = yym422
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceClassName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceClassName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym423 := z.EncBinary()
				_ = yym423
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceClassName))
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym425 := z.EncBinary()
				_ = yym425
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PlanName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("planName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym426 := z.EncBinary()
				_ = yym426
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PlanName))
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[2] {
					if x.Parameters == nil {
						r.EncodeNil()
					} else {
						yym428 := z.EncBinary()
						_ = yym428
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Parameters) {
						} else if !yym428 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Parameters)
						} else {
							z.EncFallback(x.Parameters)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq420[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("parameters"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Parameters == nil {
						r.EncodeNil()
					} else {
						yym429 := z.EncBinary()
						_ = yym429
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Parameters) {
						} else if !yym429 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Parameters)
						} else {
							z.EncFallback(x.Parameters)
						}
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym431 := z.EncBinary()
				_ = yym431
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbGuid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym432 := z.EncBinary()
				_ = yym432
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.OSBDashboardURL == nil {
					r.EncodeNil()
				} else {
					yy434 := *x.OSBDashboardURL
					yym435 := z.EncBinary()
					_ = yym435
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(yy434))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbDashboardURL"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.OSBDashboardURL == nil {
					r.EncodeNil()
				} else {
					yy436 := *x.OSBDashboardURL
					yym437 := z.EncBinary()
					_ = yym437
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(yy436))
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.OSBLastOperation == nil {
					r.EncodeNil()
				} else {
					yy439 := *x.OSBLastOperation
					yym440 := z.EncBinary()
					_ = yym440
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(yy439))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbLastOperation"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.OSBLastOperation == nil {
					r.EncodeNil()
				} else {
					yy441 := *x.OSBLastOperation
					yym442 := z.EncBinary()
					_ = yym442
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(yy441))
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym444 := z.EncBinary()
				_ = yym444
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBCredentials))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbCredentials"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym445 := z.EncBinary()
				_ = yym445
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBCredentials))
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym447 := z.EncBinary()
				_ = yym447
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBInternalID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbInternalID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym448 := z.EncBinary()
				_ = yym448
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBInternalID))
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym450 := z.EncBinary()
				_ = yym450
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBServiceID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbServiceID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym451 := z.EncBinary()
				_ = yym451
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBServiceID))
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym453 := z.EncBinary()
				_ = yym453
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBPlanID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbPlanID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym454 := z.EncBinary()
				_ = yym454
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBPlanID))
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym456 := z.EncBinary()
				_ = yym456
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbType"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym457 := z.EncBinary()
				_ = yym457
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBType))
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym459 := z.EncBinary()
				_ = yym459
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBSpaceGUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbSpaceGUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym460 := z.EncBinary()
				_ = yym460
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBSpaceGUID))
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym461 := z.DecBinary()
	_ = yym461
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct462 := r.ContainerType()
		if yyct462 == codecSelferValueTypeMap1234 {
			yyl462 := r.ReadMapStart()
			if yyl462 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl462, d)
			}
		} else if yyct462 == codecSelferValueTypeArray1234 {
			yyl462 := r.ReadArrayStart()
			if yyl462 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl462, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys463Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys463Slc
	var yyhl463 bool = l >= 0
	for yyj463 := 0; ; yyj463++ {
		if yyhl463 {
			if yyj463 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys463Slc = r.DecodeBytes(yys463Slc, true, true)
		yys463 := string(yys463Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys463 {
		case "serviceClassName":
			if r.TryDecodeAsNil() {
				x.ServiceClassName = ""
			} else {
				x.ServiceClassName = string(r.DecodeString())
			}
		case "planName":
			if r.TryDecodeAsNil() {
				x.PlanName = ""
			} else {
				x.PlanName = string(r.DecodeString())
			}
		case "parameters":
			if r.TryDecodeAsNil() {
				if x.Parameters != nil {
					x.Parameters = nil
				}
			} else {
				if x.Parameters == nil {
					x.Parameters = new(pkg4_runtime.RawExtension)
				}
				yym467 := z.DecBinary()
				_ = yym467
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Parameters) {
				} else if !yym467 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.Parameters)
				} else {
					z.DecFallback(x.Parameters, false)
				}
			}
		case "osbGuid":
			if r.TryDecodeAsNil() {
				x.OSBGUID = ""
			} else {
				x.OSBGUID = string(r.DecodeString())
			}
		case "osbDashboardURL":
			if r.TryDecodeAsNil() {
				if x.OSBDashboardURL != nil {
					x.OSBDashboardURL = nil
				}
			} else {
				if x.OSBDashboardURL == nil {
					x.OSBDashboardURL = new(string)
				}
				yym470 := z.DecBinary()
				_ = yym470
				if false {
				} else {
					*((*string)(x.OSBDashboardURL)) = r.DecodeString()
				}
			}
		case "osbLastOperation":
			if r.TryDecodeAsNil() {
				if x.OSBLastOperation != nil {
					x.OSBLastOperation = nil
				}
			} else {
				if x.OSBLastOperation == nil {
					x.OSBLastOperation = new(string)
				}
				yym472 := z.DecBinary()
				_ = yym472
				if false {
				} else {
					*((*string)(x.OSBLastOperation)) = r.DecodeString()
				}
			}
		case "osbCredentials":
			if r.TryDecodeAsNil() {
				x.OSBCredentials = ""
			} else {
				x.OSBCredentials = string(r.DecodeString())
			}
		case "osbInternalID":
			if r.TryDecodeAsNil() {
				x.OSBInternalID = ""
			} else {
				x.OSBInternalID = string(r.DecodeString())
			}
		case "osbServiceID":
			if r.TryDecodeAsNil() {
				x.OSBServiceID = ""
			} else {
				x.OSBServiceID = string(r.DecodeString())
			}
		case "osbPlanID":
			if r.TryDecodeAsNil() {
				x.OSBPlanID = ""
			} else {
				x.OSBPlanID = string(r.DecodeString())
			}
		case "osbType":
			if r.TryDecodeAsNil() {
				x.OSBType = ""
			} else {
				x.OSBType = string(r.DecodeString())
			}
		case "osbSpaceGUID":
			if r.TryDecodeAsNil() {
				x.OSBSpaceGUID = ""
			} else {
				x.OSBSpaceGUID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys463)
		} // end switch yys463
	} // end for yyj463
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj479 int
	var yyb479 bool
	var yyhl479 bool = l >= 0
	yyj479++
	if yyhl479 {
		yyb479 = yyj479 > l
	} else {
		yyb479 = r.CheckBreak()
	}
	if yyb479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceClassName = ""
	} else {
		x.ServiceClassName = string(r.DecodeString())
	}
	yyj479++
	if yyhl479 {
		yyb479 = yyj479 > l
	} else {
		yyb479 = r.CheckBreak()
	}
	if yyb479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PlanName = ""
	} else {
		x.PlanName = string(r.DecodeString())
	}
	yyj479++
	if yyhl479 {
		yyb479 = yyj479 > l
	} else {
		yyb479 = r.CheckBreak()
	}
	if yyb479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Parameters != nil {
			x.Parameters = nil
		}
	} else {
		if x.Parameters == nil {
			x.Parameters = new(pkg4_runtime.RawExtension)
		}
		yym483 := z.DecBinary()
		_ = yym483
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Parameters) {
		} else if !yym483 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.Parameters)
		} else {
			z.DecFallback(x.Parameters, false)
		}
	}
	yyj479++
	if yyhl479 {
		yyb479 = yyj479 > l
	} else {
		yyb479 = r.CheckBreak()
	}
	if yyb479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBGUID = ""
	} else {
		x.OSBGUID = string(r.DecodeString())
	}
	yyj479++
	if yyhl479 {
		yyb479 = yyj479 > l
	} else {
		yyb479 = r.CheckBreak()
	}
	if yyb479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OSBDashboardURL != nil {
			x.OSBDashboardURL = nil
		}
	} else {
		if x.OSBDashboardURL == nil {
			x.OSBDashboardURL = new(string)
		}
		yym486 := z.DecBinary()
		_ = yym486
		if false {
		} else {
			*((*string)(x.OSBDashboardURL)) = r.DecodeString()
		}
	}
	yyj479++
	if yyhl479 {
		yyb479 = yyj479 > l
	} else {
		yyb479 = r.CheckBreak()
	}
	if yyb479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OSBLastOperation != nil {
			x.OSBLastOperation = nil
		}
	} else {
		if x.OSBLastOperation == nil {
			x.OSBLastOperation = new(string)
		}
		yym488 := z.DecBinary()
		_ = yym488
		if false {
		} else {
			*((*string)(x.OSBLastOperation)) = r.DecodeString()
		}
	}
	yyj479++
	if yyhl479 {
		yyb479 = yyj479 > l
	} else {
		yyb479 = r.CheckBreak()
	}
	if yyb479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBCredentials = ""
	} else {
		x.OSBCredentials = string(r.DecodeString())
	}
	yyj479++
	if yyhl479 {
		yyb479 = yyj479 > l
	} else {
		yyb479 = r.CheckBreak()
	}
	if yyb479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBInternalID = ""
	} else {
		x.OSBInternalID = string(r.DecodeString())
	}
	yyj479++
	if yyhl479 {
		yyb479 = yyj479 > l
	} else {
		yyb479 = r.CheckBreak()
	}
	if yyb479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBServiceID = ""
	} else {
		x.OSBServiceID = string(r.DecodeString())
	}
	yyj479++
	if yyhl479 {
		yyb479 = yyj479 > l
	} else {
		yyb479 = r.CheckBreak()
	}
	if yyb479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBPlanID = ""
	} else {
		x.OSBPlanID = string(r.DecodeString())
	}
	yyj479++
	if yyhl479 {
		yyb479 = yyj479 > l
	} else {
		yyb479 = r.CheckBreak()
	}
	if yyb479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBType = ""
	} else {
		x.OSBType = string(r.DecodeString())
	}
	yyj479++
	if yyhl479 {
		yyb479 = yyj479 > l
	} else {
		yyb479 = r.CheckBreak()
	}
	if yyb479 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBSpaceGUID = ""
	} else {
		x.OSBSpaceGUID = string(r.DecodeString())
	}
	for {
		yyj479++
		if yyhl479 {
			yyb479 = yyj479 > l
		} else {
			yyb479 = r.CheckBreak()
		}
		if yyb479 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj479-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym495 := z.EncBinary()
		_ = yym495
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep496 := !z.EncBinary()
			yy2arr496 := z.EncBasicHandle().StructToArray
			var yyq496 [1]bool
			_, _, _ = yysep496, yyq496, yy2arr496
			const yyr496 bool = false
			var yynn496 int
			if yyr496 || yy2arr496 {
				r.EncodeArrayStart(1)
			} else {
				yynn496 = 1
				for _, b := range yyq496 {
					if b {
						yynn496++
					}
				}
				r.EncodeMapStart(yynn496)
				yynn496 = 0
			}
			if yyr496 || yy2arr496 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym498 := z.EncBinary()
					_ = yym498
					if false {
					} else {
						h.encSliceInstanceCondition(([]InstanceCondition)(x.Conditions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("conditions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym499 := z.EncBinary()
					_ = yym499
					if false {
					} else {
						h.encSliceInstanceCondition(([]InstanceCondition)(x.Conditions), e)
					}
				}
			}
			if yyr496 || yy2arr496 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym500 := z.DecBinary()
	_ = yym500
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct501 := r.ContainerType()
		if yyct501 == codecSelferValueTypeMap1234 {
			yyl501 := r.ReadMapStart()
			if yyl501 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl501, d)
			}
		} else if yyct501 == codecSelferValueTypeArray1234 {
			yyl501 := r.ReadArrayStart()
			if yyl501 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl501, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys502Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys502Slc
	var yyhl502 bool = l >= 0
	for yyj502 := 0; ; yyj502++ {
		if yyhl502 {
			if yyj502 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys502Slc = r.DecodeBytes(yys502Slc, true, true)
		yys502 := string(yys502Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys502 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv503 := &x.Conditions
				yym504 := z.DecBinary()
				_ = yym504
				if false {
				} else {
					h.decSliceInstanceCondition((*[]InstanceCondition)(yyv503), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys502)
		} // end switch yys502
	} // end for yyj502
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj505 int
	var yyb505 bool
	var yyhl505 bool = l >= 0
	yyj505++
	if yyhl505 {
		yyb505 = yyj505 > l
	} else {
		yyb505 = r.CheckBreak()
	}
	if yyb505 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv506 := &x.Conditions
		yym507 := z.DecBinary()
		_ = yym507
		if false {
		} else {
			h.decSliceInstanceCondition((*[]InstanceCondition)(yyv506), d)
		}
	}
	for {
		yyj505++
		if yyhl505 {
			yyb505 = yyj505 > l
		} else {
			yyb505 = r.CheckBreak()
		}
		if yyb505 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj505-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym508 := z.EncBinary()
		_ = yym508
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep509 := !z.EncBinary()
			yy2arr509 := z.EncBasicHandle().StructToArray
			var yyq509 [4]bool
			_, _, _ = yysep509, yyq509, yy2arr509
			const yyr509 bool = false
			var yynn509 int
			if yyr509 || yy2arr509 {
				r.EncodeArrayStart(4)
			} else {
				yynn509 = 4
				for _, b := range yyq509 {
					if b {
						yynn509++
					}
				}
				r.EncodeMapStart(yynn509)
				yynn509 = 0
			}
			if yyr509 || yy2arr509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr509 || yy2arr509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr509 || yy2arr509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym513 := z.EncBinary()
				_ = yym513
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("reason"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym514 := z.EncBinary()
				_ = yym514
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			}
			if yyr509 || yy2arr509 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym516 := z.EncBinary()
				_ = yym516
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("message"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym517 := z.EncBinary()
				_ = yym517
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			}
			if yyr509 || yy2arr509 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym518 := z.DecBinary()
	_ = yym518
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct519 := r.ContainerType()
		if yyct519 == codecSelferValueTypeMap1234 {
			yyl519 := r.ReadMapStart()
			if yyl519 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl519, d)
			}
		} else if yyct519 == codecSelferValueTypeArray1234 {
			yyl519 := r.ReadArrayStart()
			if yyl519 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl519, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys520Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys520Slc
	var yyhl520 bool = l >= 0
	for yyj520 := 0; ; yyj520++ {
		if yyhl520 {
			if yyj520 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys520Slc = r.DecodeBytes(yys520Slc, true, true)
		yys520 := string(yys520Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys520 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = InstanceConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys520)
		} // end switch yys520
	} // end for yyj520
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj525 int
	var yyb525 bool
	var yyhl525 bool = l >= 0
	yyj525++
	if yyhl525 {
		yyb525 = yyj525 > l
	} else {
		yyb525 = r.CheckBreak()
	}
	if yyb525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = InstanceConditionType(r.DecodeString())
	}
	yyj525++
	if yyhl525 {
		yyb525 = yyj525 > l
	} else {
		yyb525 = r.CheckBreak()
	}
	if yyb525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj525++
	if yyhl525 {
		yyb525 = yyj525 > l
	} else {
		yyb525 = r.CheckBreak()
	}
	if yyb525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj525++
	if yyhl525 {
		yyb525 = yyj525 > l
	} else {
		yyb525 = r.CheckBreak()
	}
	if yyb525 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj525++
		if yyhl525 {
			yyb525 = yyj525 > l
		} else {
			yyb525 = r.CheckBreak()
		}
		if yyb525 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj525-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x InstanceConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym530 := z.EncBinary()
	_ = yym530
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *InstanceConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym531 := z.DecBinary()
	_ = yym531
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *BindingList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym532 := z.EncBinary()
		_ = yym532
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep533 := !z.EncBinary()
			yy2arr533 := z.EncBasicHandle().StructToArray
			var yyq533 [4]bool
			_, _, _ = yysep533, yyq533, yy2arr533
			const yyr533 bool = false
			yyq533[0] = x.Kind != ""
			yyq533[1] = x.APIVersion != ""
			yyq533[2] = true
			var yynn533 int
			if yyr533 || yy2arr533 {
				r.EncodeArrayStart(4)
			} else {
				yynn533 = 1
				for _, b := range yyq533 {
					if b {
						yynn533++
					}
				}
				r.EncodeMapStart(yynn533)
				yynn533 = 0
			}
			if yyr533 || yy2arr533 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq533[0] {
					yym535 := z.EncBinary()
					_ = yym535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq533[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym536 := z.EncBinary()
					_ = yym536
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr533 || yy2arr533 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq533[1] {
					yym538 := z.EncBinary()
					_ = yym538
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq533[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym539 := z.EncBinary()
					_ = yym539
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr533 || yy2arr533 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq533[2] {
					yy541 := &x.ListMeta
					yym542 := z.EncBinary()
					_ = yym542
					if false {
					} else if z.HasExtensions() && z.EncExt(yy541) {
					} else {
						z.EncFallback(yy541)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq533[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy543 := &x.ListMeta
					yym544 := z.EncBinary()
					_ = yym544
					if false {
					} else if z.HasExtensions() && z.EncExt(yy543) {
					} else {
						z.EncFallback(yy543)
					}
				}
			}
			if yyr533 || yy2arr533 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym546 := z.EncBinary()
					_ = yym546
					if false {
					} else {
						h.encSliceBinding(([]Binding)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym547 := z.EncBinary()
					_ = yym547
					if false {
					} else {
						h.encSliceBinding(([]Binding)(x.Items), e)
					}
				}
			}
			if yyr533 || yy2arr533 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BindingList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym548 := z.DecBinary()
	_ = yym548
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct549 := r.ContainerType()
		if yyct549 == codecSelferValueTypeMap1234 {
			yyl549 := r.ReadMapStart()
			if yyl549 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl549, d)
			}
		} else if yyct549 == codecSelferValueTypeArray1234 {
			yyl549 := r.ReadArrayStart()
			if yyl549 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl549, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BindingList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys550Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys550Slc
	var yyhl550 bool = l >= 0
	for yyj550 := 0; ; yyj550++ {
		if yyhl550 {
			if yyj550 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys550Slc = r.DecodeBytes(yys550Slc, true, true)
		yys550 := string(yys550Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys550 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv553 := &x.ListMeta
				yym554 := z.DecBinary()
				_ = yym554
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv553) {
				} else {
					z.DecFallback(yyv553, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv555 := &x.Items
				yym556 := z.DecBinary()
				_ = yym556
				if false {
				} else {
					h.decSliceBinding((*[]Binding)(yyv555), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys550)
		} // end switch yys550
	} // end for yyj550
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BindingList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj557 int
	var yyb557 bool
	var yyhl557 bool = l >= 0
	yyj557++
	if yyhl557 {
		yyb557 = yyj557 > l
	} else {
		yyb557 = r.CheckBreak()
	}
	if yyb557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj557++
	if yyhl557 {
		yyb557 = yyj557 > l
	} else {
		yyb557 = r.CheckBreak()
	}
	if yyb557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj557++
	if yyhl557 {
		yyb557 = yyj557 > l
	} else {
		yyb557 = r.CheckBreak()
	}
	if yyb557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv560 := &x.ListMeta
		yym561 := z.DecBinary()
		_ = yym561
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv560) {
		} else {
			z.DecFallback(yyv560, false)
		}
	}
	yyj557++
	if yyhl557 {
		yyb557 = yyj557 > l
	} else {
		yyb557 = r.CheckBreak()
	}
	if yyb557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv562 := &x.Items
		yym563 := z.DecBinary()
		_ = yym563
		if false {
		} else {
			h.decSliceBinding((*[]Binding)(yyv562), d)
		}
	}
	for {
		yyj557++
		if yyhl557 {
			yyb557 = yyj557 > l
		} else {
			yyb557 = r.CheckBreak()
		}
		if yyb557 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj557-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym564 := z.EncBinary()
		_ = yym564
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep565 := !z.EncBinary()
			yy2arr565 := z.EncBasicHandle().StructToArray
			var yyq565 [5]bool
			_, _, _ = yysep565, yyq565, yy2arr565
			const yyr565 bool = false
			yyq565[0] = x.Kind != ""
			yyq565[1] = x.APIVersion != ""
			yyq565[2] = true
			var yynn565 int
			if yyr565 || yy2arr565 {
				r.EncodeArrayStart(5)
			} else {
				yynn565 = 2
				for _, b := range yyq565 {
					if b {
						yynn565++
					}
				}
				r.EncodeMapStart(yynn565)
				yynn565 = 0
			}
			if yyr565 || yy2arr565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq565[0] {
					yym567 := z.EncBinary()
					_ = yym567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq565[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym568 := z.EncBinary()
					_ = yym568
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr565 || yy2arr565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq565[1] {
					yym570 := z.EncBinary()
					_ = yym570
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq565[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym571 := z.EncBinary()
					_ = yym571
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr565 || yy2arr565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq565[2] {
					yy573 := &x.ObjectMeta
					yy573.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq565[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy574 := &x.ObjectMeta
					yy574.CodecEncodeSelf(e)
				}
			}
			if yyr565 || yy2arr565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy576 := &x.Spec
				yy576.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("spec"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy577 := &x.Spec
				yy577.CodecEncodeSelf(e)
			}
			if yyr565 || yy2arr565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy579 := &x.Status
				yy579.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy580 := &x.Status
				yy580.CodecEncodeSelf(e)
			}
			if yyr565 || yy2arr565 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym581 := z.DecBinary()
	_ = yym581
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct582 := r.ContainerType()
		if yyct582 == codecSelferValueTypeMap1234 {
			yyl582 := r.ReadMapStart()
			if yyl582 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl582, d)
			}
		} else if yyct582 == codecSelferValueTypeArray1234 {
			yyl582 := r.ReadArrayStart()
			if yyl582 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl582, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys583Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys583Slc
	var yyhl583 bool = l >= 0
	for yyj583 := 0; ; yyj583++ {
		if yyhl583 {
			if yyj583 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys583Slc = r.DecodeBytes(yys583Slc, true, true)
		yys583 := string(yys583Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys583 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv586 := &x.ObjectMeta
				yyv586.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = BindingSpec{}
			} else {
				yyv587 := &x.Spec
				yyv587.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = BindingStatus{}
			} else {
				yyv588 := &x.Status
				yyv588.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys583)
		} // end switch yys583
	} // end for yyj583
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj589 int
	var yyb589 bool
	var yyhl589 bool = l >= 0
	yyj589++
	if yyhl589 {
		yyb589 = yyj589 > l
	} else {
		yyb589 = r.CheckBreak()
	}
	if yyb589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj589++
	if yyhl589 {
		yyb589 = yyj589 > l
	} else {
		yyb589 = r.CheckBreak()
	}
	if yyb589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj589++
	if yyhl589 {
		yyb589 = yyj589 > l
	} else {
		yyb589 = r.CheckBreak()
	}
	if yyb589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv592 := &x.ObjectMeta
		yyv592.CodecDecodeSelf(d)
	}
	yyj589++
	if yyhl589 {
		yyb589 = yyj589 > l
	} else {
		yyb589 = r.CheckBreak()
	}
	if yyb589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = BindingSpec{}
	} else {
		yyv593 := &x.Spec
		yyv593.CodecDecodeSelf(d)
	}
	yyj589++
	if yyhl589 {
		yyb589 = yyj589 > l
	} else {
		yyb589 = r.CheckBreak()
	}
	if yyb589 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = BindingStatus{}
	} else {
		yyv594 := &x.Status
		yyv594.CodecDecodeSelf(d)
	}
	for {
		yyj589++
		if yyhl589 {
			yyb589 = yyj589 > l
		} else {
			yyb589 = r.CheckBreak()
		}
		if yyb589 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj589-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BindingSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym595 := z.EncBinary()
		_ = yym595
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep596 := !z.EncBinary()
			yy2arr596 := z.EncBasicHandle().StructToArray
			var yyq596 [7]bool
			_, _, _ = yysep596, yyq596, yy2arr596
			const yyr596 bool = false
			yyq596[2] = x.Parameters != nil
			var yynn596 int
			if yyr596 || yy2arr596 {
				r.EncodeArrayStart(7)
			} else {
				yynn596 = 6
				for _, b := range yyq596 {
					if b {
						yynn596++
					}
				}
				r.EncodeMapStart(yynn596)
				yynn596 = 0
			}
			if yyr596 || yy2arr596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy598 := &x.InstanceRef
				yy598.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("instanceRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy599 := &x.InstanceRef
				yy599.CodecEncodeSelf(e)
			}
			if yyr596 || yy2arr596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy601 := &x.AppLabelSelector
				yym602 := z.EncBinary()
				_ = yym602
				if false {
				} else if z.HasExtensions() && z.EncExt(yy601) {
				} else {
					z.EncFallback(yy601)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("appLabelSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy603 := &x.AppLabelSelector
				yym604 := z.EncBinary()
				_ = yym604
				if false {
				} else if z.HasExtensions() && z.EncExt(yy603) {
				} else {
					z.EncFallback(yy603)
				}
			}
			if yyr596 || yy2arr596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq596[2] {
					if x.Parameters == nil {
						r.EncodeNil()
					} else {
						yym606 := z.EncBinary()
						_ = yym606
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Parameters) {
						} else if !yym606 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Parameters)
						} else {
							z.EncFallback(x.Parameters)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq596[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("parameters"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Parameters == nil {
						r.EncodeNil()
					} else {
						yym607 := z.EncBinary()
						_ = yym607
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Parameters) {
						} else if !yym607 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Parameters)
						} else {
							z.EncFallback(x.Parameters)
						}
					}
				}
			}
			if yyr596 || yy2arr596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym609 := z.EncBinary()
				_ = yym609
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym610 := z.EncBinary()
				_ = yym610
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr596 || yy2arr596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym612 := z.EncBinary()
				_ = yym612
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym613 := z.EncBinary()
				_ = yym613
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr596 || yy2arr596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym615 := z.EncBinary()
				_ = yym615
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ConfigMapName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("configMapName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym616 := z.EncBinary()
				_ = yym616
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ConfigMapName))
				}
			}
			if yyr596 || yy2arr596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym618 := z.EncBinary()
				_ = yym618
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbGuid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym619 := z.EncBinary()
				_ = yym619
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			}
			if yyr596 || yy2arr596 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BindingSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym620 := z.DecBinary()
	_ = yym620
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct621 := r.ContainerType()
		if yyct621 == codecSelferValueTypeMap1234 {
			yyl621 := r.ReadMapStart()
			if yyl621 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl621, d)
			}
		} else if yyct621 == codecSelferValueTypeArray1234 {
			yyl621 := r.ReadArrayStart()
			if yyl621 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl621, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BindingSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys622Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys622Slc
	var yyhl622 bool = l >= 0
	for yyj622 := 0; ; yyj622++ {
		if yyhl622 {
			if yyj622 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys622Slc = r.DecodeBytes(yys622Slc, true, true)
		yys622 := string(yys622Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys622 {
		case "instanceRef":
			if r.TryDecodeAsNil() {
				x.InstanceRef = pkg2_v1.ObjectReference{}
			} else {
				yyv623 := &x.InstanceRef
				yyv623.CodecDecodeSelf(d)
			}
		case "appLabelSelector":
			if r.TryDecodeAsNil() {
				x.AppLabelSelector = pkg1_v1.LabelSelector{}
			} else {
				yyv624 := &x.AppLabelSelector
				yym625 := z.DecBinary()
				_ = yym625
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv624) {
				} else {
					z.DecFallback(yyv624, false)
				}
			}
		case "parameters":
			if r.TryDecodeAsNil() {
				if x.Parameters != nil {
					x.Parameters = nil
				}
			} else {
				if x.Parameters == nil {
					x.Parameters = new(pkg4_runtime.RawExtension)
				}
				yym627 := z.DecBinary()
				_ = yym627
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Parameters) {
				} else if !yym627 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.Parameters)
				} else {
					z.DecFallback(x.Parameters, false)
				}
			}
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "configMapName":
			if r.TryDecodeAsNil() {
				x.ConfigMapName = ""
			} else {
				x.ConfigMapName = string(r.DecodeString())
			}
		case "osbGuid":
			if r.TryDecodeAsNil() {
				x.OSBGUID = ""
			} else {
				x.OSBGUID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys622)
		} // end switch yys622
	} // end for yyj622
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BindingSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj632 int
	var yyb632 bool
	var yyhl632 bool = l >= 0
	yyj632++
	if yyhl632 {
		yyb632 = yyj632 > l
	} else {
		yyb632 = r.CheckBreak()
	}
	if yyb632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InstanceRef = pkg2_v1.ObjectReference{}
	} else {
		yyv633 := &x.InstanceRef
		yyv633.CodecDecodeSelf(d)
	}
	yyj632++
	if yyhl632 {
		yyb632 = yyj632 > l
	} else {
		yyb632 = r.CheckBreak()
	}
	if yyb632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AppLabelSelector = pkg1_v1.LabelSelector{}
	} else {
		yyv634 := &x.AppLabelSelector
		yym635 := z.DecBinary()
		_ = yym635
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv634) {
		} else {
			z.DecFallback(yyv634, false)
		}
	}
	yyj632++
	if yyhl632 {
		yyb632 = yyj632 > l
	} else {
		yyb632 = r.CheckBreak()
	}
	if yyb632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Parameters != nil {
			x.Parameters = nil
		}
	} else {
		if x.Parameters == nil {
			x.Parameters = new(pkg4_runtime.RawExtension)
		}
		yym637 := z.DecBinary()
		_ = yym637
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Parameters) {
		} else if !yym637 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.Parameters)
		} else {
			z.DecFallback(x.Parameters, false)
		}
	}
	yyj632++
	if yyhl632 {
		yyb632 = yyj632 > l
	} else {
		yyb632 = r.CheckBreak()
	}
	if yyb632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj632++
	if yyhl632 {
		yyb632 = yyj632 > l
	} else {
		yyb632 = r.CheckBreak()
	}
	if yyb632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj632++
	if yyhl632 {
		yyb632 = yyj632 > l
	} else {
		yyb632 = r.CheckBreak()
	}
	if yyb632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ConfigMapName = ""
	} else {
		x.ConfigMapName = string(r.DecodeString())
	}
	yyj632++
	if yyhl632 {
		yyb632 = yyj632 > l
	} else {
		yyb632 = r.CheckBreak()
	}
	if yyb632 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBGUID = ""
	} else {
		x.OSBGUID = string(r.DecodeString())
	}
	for {
		yyj632++
		if yyhl632 {
			yyb632 = yyj632 > l
		} else {
			yyb632 = r.CheckBreak()
		}
		if yyb632 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj632-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BindingStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym642 := z.EncBinary()
		_ = yym642
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep643 := !z.EncBinary()
			yy2arr643 := z.EncBasicHandle().StructToArray
			var yyq643 [1]bool
			_, _, _ = yysep643, yyq643, yy2arr643
			const yyr643 bool = false
			var yynn643 int
			if yyr643 || yy2arr643 {
				r.EncodeArrayStart(1)
			} else {
				yynn643 = 1
				for _, b := range yyq643 {
					if b {
						yynn643++
					}
				}
				r.EncodeMapStart(yynn643)
				yynn643 = 0
			}
			if yyr643 || yy2arr643 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym645 := z.EncBinary()
					_ = yym645
					if false {
					} else {
						h.encSliceBindingCondition(([]BindingCondition)(x.Conditions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("conditions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym646 := z.EncBinary()
					_ = yym646
					if false {
					} else {
						h.encSliceBindingCondition(([]BindingCondition)(x.Conditions), e)
					}
				}
			}
			if yyr643 || yy2arr643 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BindingStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym647 := z.DecBinary()
	_ = yym647
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct648 := r.ContainerType()
		if yyct648 == codecSelferValueTypeMap1234 {
			yyl648 := r.ReadMapStart()
			if yyl648 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl648, d)
			}
		} else if yyct648 == codecSelferValueTypeArray1234 {
			yyl648 := r.ReadArrayStart()
			if yyl648 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl648, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BindingStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys649Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys649Slc
	var yyhl649 bool = l >= 0
	for yyj649 := 0; ; yyj649++ {
		if yyhl649 {
			if yyj649 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys649Slc = r.DecodeBytes(yys649Slc, true, true)
		yys649 := string(yys649Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys649 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv650 := &x.Conditions
				yym651 := z.DecBinary()
				_ = yym651
				if false {
				} else {
					h.decSliceBindingCondition((*[]BindingCondition)(yyv650), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys649)
		} // end switch yys649
	} // end for yyj649
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BindingStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj652 int
	var yyb652 bool
	var yyhl652 bool = l >= 0
	yyj652++
	if yyhl652 {
		yyb652 = yyj652 > l
	} else {
		yyb652 = r.CheckBreak()
	}
	if yyb652 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv653 := &x.Conditions
		yym654 := z.DecBinary()
		_ = yym654
		if false {
		} else {
			h.decSliceBindingCondition((*[]BindingCondition)(yyv653), d)
		}
	}
	for {
		yyj652++
		if yyhl652 {
			yyb652 = yyj652 > l
		} else {
			yyb652 = r.CheckBreak()
		}
		if yyb652 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj652-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BindingCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym655 := z.EncBinary()
		_ = yym655
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep656 := !z.EncBinary()
			yy2arr656 := z.EncBasicHandle().StructToArray
			var yyq656 [4]bool
			_, _, _ = yysep656, yyq656, yy2arr656
			const yyr656 bool = false
			var yynn656 int
			if yyr656 || yy2arr656 {
				r.EncodeArrayStart(4)
			} else {
				yynn656 = 4
				for _, b := range yyq656 {
					if b {
						yynn656++
					}
				}
				r.EncodeMapStart(yynn656)
				yynn656 = 0
			}
			if yyr656 || yy2arr656 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr656 || yy2arr656 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr656 || yy2arr656 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym660 := z.EncBinary()
				_ = yym660
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("reason"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym661 := z.EncBinary()
				_ = yym661
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			}
			if yyr656 || yy2arr656 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym663 := z.EncBinary()
				_ = yym663
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("message"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym664 := z.EncBinary()
				_ = yym664
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			}
			if yyr656 || yy2arr656 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BindingCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym665 := z.DecBinary()
	_ = yym665
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct666 := r.ContainerType()
		if yyct666 == codecSelferValueTypeMap1234 {
			yyl666 := r.ReadMapStart()
			if yyl666 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl666, d)
			}
		} else if yyct666 == codecSelferValueTypeArray1234 {
			yyl666 := r.ReadArrayStart()
			if yyl666 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl666, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BindingCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys667Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys667Slc
	var yyhl667 bool = l >= 0
	for yyj667 := 0; ; yyj667++ {
		if yyhl667 {
			if yyj667 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys667Slc = r.DecodeBytes(yys667Slc, true, true)
		yys667 := string(yys667Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys667 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = BindingConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys667)
		} // end switch yys667
	} // end for yyj667
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BindingCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj672 int
	var yyb672 bool
	var yyhl672 bool = l >= 0
	yyj672++
	if yyhl672 {
		yyb672 = yyj672 > l
	} else {
		yyb672 = r.CheckBreak()
	}
	if yyb672 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = BindingConditionType(r.DecodeString())
	}
	yyj672++
	if yyhl672 {
		yyb672 = yyj672 > l
	} else {
		yyb672 = r.CheckBreak()
	}
	if yyb672 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj672++
	if yyhl672 {
		yyb672 = yyj672 > l
	} else {
		yyb672 = r.CheckBreak()
	}
	if yyb672 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj672++
	if yyhl672 {
		yyb672 = yyj672 > l
	} else {
		yyb672 = r.CheckBreak()
	}
	if yyb672 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj672++
		if yyhl672 {
			yyb672 = yyj672 > l
		} else {
			yyb672 = r.CheckBreak()
		}
		if yyb672 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj672-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x BindingConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym677 := z.EncBinary()
	_ = yym677
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *BindingConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym678 := z.DecBinary()
	_ = yym678
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x codecSelfer1234) encSliceBroker(v []Broker, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv679 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy680 := &yyv679
		yy680.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceBroker(v *[]Broker, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv681 := *v
	yyh681, yyl681 := z.DecSliceHelperStart()
	var yyc681 bool
	if yyl681 == 0 {
		if yyv681 == nil {
			yyv681 = []Broker{}
			yyc681 = true
		} else if len(yyv681) != 0 {
			yyv681 = yyv681[:0]
			yyc681 = true
		}
	} else if yyl681 > 0 {
		var yyrr681, yyrl681 int
		var yyrt681 bool
		if yyl681 > cap(yyv681) {

			yyrg681 := len(yyv681) > 0
			yyv2681 := yyv681
			yyrl681, yyrt681 = z.DecInferLen(yyl681, z.DecBasicHandle().MaxInitLen, 304)
			if yyrt681 {
				if yyrl681 <= cap(yyv681) {
					yyv681 = yyv681[:yyrl681]
				} else {
					yyv681 = make([]Broker, yyrl681)
				}
			} else {
				yyv681 = make([]Broker, yyrl681)
			}
			yyc681 = true
			yyrr681 = len(yyv681)
			if yyrg681 {
				copy(yyv681, yyv2681)
			}
		} else if yyl681 != len(yyv681) {
			yyv681 = yyv681[:yyl681]
			yyc681 = true
		}
		yyj681 := 0
		for ; yyj681 < yyrr681; yyj681++ {
			yyh681.ElemContainerState(yyj681)
			if r.TryDecodeAsNil() {
				yyv681[yyj681] = Broker{}
			} else {
				yyv682 := &yyv681[yyj681]
				yyv682.CodecDecodeSelf(d)
			}

		}
		if yyrt681 {
			for ; yyj681 < yyl681; yyj681++ {
				yyv681 = append(yyv681, Broker{})
				yyh681.ElemContainerState(yyj681)
				if r.TryDecodeAsNil() {
					yyv681[yyj681] = Broker{}
				} else {
					yyv683 := &yyv681[yyj681]
					yyv683.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj681 := 0
		for ; !r.CheckBreak(); yyj681++ {

			if yyj681 >= len(yyv681) {
				yyv681 = append(yyv681, Broker{}) // var yyz681 Broker
				yyc681 = true
			}
			yyh681.ElemContainerState(yyj681)
			if yyj681 < len(yyv681) {
				if r.TryDecodeAsNil() {
					yyv681[yyj681] = Broker{}
				} else {
					yyv684 := &yyv681[yyj681]
					yyv684.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj681 < len(yyv681) {
			yyv681 = yyv681[:yyj681]
			yyc681 = true
		} else if yyj681 == 0 && yyv681 == nil {
			yyv681 = []Broker{}
			yyc681 = true
		}
	}
	yyh681.End()
	if yyc681 {
		*v = yyv681
	}
}

func (x codecSelfer1234) encSliceBrokerCondition(v []BrokerCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv685 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy686 := &yyv685
		yy686.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceBrokerCondition(v *[]BrokerCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv687 := *v
	yyh687, yyl687 := z.DecSliceHelperStart()
	var yyc687 bool
	if yyl687 == 0 {
		if yyv687 == nil {
			yyv687 = []BrokerCondition{}
			yyc687 = true
		} else if len(yyv687) != 0 {
			yyv687 = yyv687[:0]
			yyc687 = true
		}
	} else if yyl687 > 0 {
		var yyrr687, yyrl687 int
		var yyrt687 bool
		if yyl687 > cap(yyv687) {

			yyrg687 := len(yyv687) > 0
			yyv2687 := yyv687
			yyrl687, yyrt687 = z.DecInferLen(yyl687, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt687 {
				if yyrl687 <= cap(yyv687) {
					yyv687 = yyv687[:yyrl687]
				} else {
					yyv687 = make([]BrokerCondition, yyrl687)
				}
			} else {
				yyv687 = make([]BrokerCondition, yyrl687)
			}
			yyc687 = true
			yyrr687 = len(yyv687)
			if yyrg687 {
				copy(yyv687, yyv2687)
			}
		} else if yyl687 != len(yyv687) {
			yyv687 = yyv687[:yyl687]
			yyc687 = true
		}
		yyj687 := 0
		for ; yyj687 < yyrr687; yyj687++ {
			yyh687.ElemContainerState(yyj687)
			if r.TryDecodeAsNil() {
				yyv687[yyj687] = BrokerCondition{}
			} else {
				yyv688 := &yyv687[yyj687]
				yyv688.CodecDecodeSelf(d)
			}

		}
		if yyrt687 {
			for ; yyj687 < yyl687; yyj687++ {
				yyv687 = append(yyv687, BrokerCondition{})
				yyh687.ElemContainerState(yyj687)
				if r.TryDecodeAsNil() {
					yyv687[yyj687] = BrokerCondition{}
				} else {
					yyv689 := &yyv687[yyj687]
					yyv689.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj687 := 0
		for ; !r.CheckBreak(); yyj687++ {

			if yyj687 >= len(yyv687) {
				yyv687 = append(yyv687, BrokerCondition{}) // var yyz687 BrokerCondition
				yyc687 = true
			}
			yyh687.ElemContainerState(yyj687)
			if yyj687 < len(yyv687) {
				if r.TryDecodeAsNil() {
					yyv687[yyj687] = BrokerCondition{}
				} else {
					yyv690 := &yyv687[yyj687]
					yyv690.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj687 < len(yyv687) {
			yyv687 = yyv687[:yyj687]
			yyc687 = true
		} else if yyj687 == 0 && yyv687 == nil {
			yyv687 = []BrokerCondition{}
			yyc687 = true
		}
	}
	yyh687.End()
	if yyc687 {
		*v = yyv687
	}
}

func (x codecSelfer1234) encSliceServiceClass(v []ServiceClass, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv691 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy692 := &yyv691
		yy692.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceClass(v *[]ServiceClass, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv693 := *v
	yyh693, yyl693 := z.DecSliceHelperStart()
	var yyc693 bool
	if yyl693 == 0 {
		if yyv693 == nil {
			yyv693 = []ServiceClass{}
			yyc693 = true
		} else if len(yyv693) != 0 {
			yyv693 = yyv693[:0]
			yyc693 = true
		}
	} else if yyl693 > 0 {
		var yyrr693, yyrl693 int
		var yyrt693 bool
		if yyl693 > cap(yyv693) {

			yyrg693 := len(yyv693) > 0
			yyv2693 := yyv693
			yyrl693, yyrt693 = z.DecInferLen(yyl693, z.DecBasicHandle().MaxInitLen, 464)
			if yyrt693 {
				if yyrl693 <= cap(yyv693) {
					yyv693 = yyv693[:yyrl693]
				} else {
					yyv693 = make([]ServiceClass, yyrl693)
				}
			} else {
				yyv693 = make([]ServiceClass, yyrl693)
			}
			yyc693 = true
			yyrr693 = len(yyv693)
			if yyrg693 {
				copy(yyv693, yyv2693)
			}
		} else if yyl693 != len(yyv693) {
			yyv693 = yyv693[:yyl693]
			yyc693 = true
		}
		yyj693 := 0
		for ; yyj693 < yyrr693; yyj693++ {
			yyh693.ElemContainerState(yyj693)
			if r.TryDecodeAsNil() {
				yyv693[yyj693] = ServiceClass{}
			} else {
				yyv694 := &yyv693[yyj693]
				yyv694.CodecDecodeSelf(d)
			}

		}
		if yyrt693 {
			for ; yyj693 < yyl693; yyj693++ {
				yyv693 = append(yyv693, ServiceClass{})
				yyh693.ElemContainerState(yyj693)
				if r.TryDecodeAsNil() {
					yyv693[yyj693] = ServiceClass{}
				} else {
					yyv695 := &yyv693[yyj693]
					yyv695.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj693 := 0
		for ; !r.CheckBreak(); yyj693++ {

			if yyj693 >= len(yyv693) {
				yyv693 = append(yyv693, ServiceClass{}) // var yyz693 ServiceClass
				yyc693 = true
			}
			yyh693.ElemContainerState(yyj693)
			if yyj693 < len(yyv693) {
				if r.TryDecodeAsNil() {
					yyv693[yyj693] = ServiceClass{}
				} else {
					yyv696 := &yyv693[yyj693]
					yyv696.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj693 < len(yyv693) {
			yyv693 = yyv693[:yyj693]
			yyc693 = true
		} else if yyj693 == 0 && yyv693 == nil {
			yyv693 = []ServiceClass{}
			yyc693 = true
		}
	}
	yyh693.End()
	if yyc693 {
		*v = yyv693
	}
}

func (x codecSelfer1234) encSliceServicePlan(v []ServicePlan, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv697 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy698 := &yyv697
		yy698.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePlan(v *[]ServicePlan, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv699 := *v
	yyh699, yyl699 := z.DecSliceHelperStart()
	var yyc699 bool
	if yyl699 == 0 {
		if yyv699 == nil {
			yyv699 = []ServicePlan{}
			yyc699 = true
		} else if len(yyv699) != 0 {
			yyv699 = yyv699[:0]
			yyc699 = true
		}
	} else if yyl699 > 0 {
		var yyrr699, yyrl699 int
		var yyrt699 bool
		if yyl699 > cap(yyv699) {

			yyrg699 := len(yyv699) > 0
			yyv2699 := yyv699
			yyrl699, yyrt699 = z.DecInferLen(yyl699, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt699 {
				if yyrl699 <= cap(yyv699) {
					yyv699 = yyv699[:yyrl699]
				} else {
					yyv699 = make([]ServicePlan, yyrl699)
				}
			} else {
				yyv699 = make([]ServicePlan, yyrl699)
			}
			yyc699 = true
			yyrr699 = len(yyv699)
			if yyrg699 {
				copy(yyv699, yyv2699)
			}
		} else if yyl699 != len(yyv699) {
			yyv699 = yyv699[:yyl699]
			yyc699 = true
		}
		yyj699 := 0
		for ; yyj699 < yyrr699; yyj699++ {
			yyh699.ElemContainerState(yyj699)
			if r.TryDecodeAsNil() {
				yyv699[yyj699] = ServicePlan{}
			} else {
				yyv700 := &yyv699[yyj699]
				yyv700.CodecDecodeSelf(d)
			}

		}
		if yyrt699 {
			for ; yyj699 < yyl699; yyj699++ {
				yyv699 = append(yyv699, ServicePlan{})
				yyh699.ElemContainerState(yyj699)
				if r.TryDecodeAsNil() {
					yyv699[yyj699] = ServicePlan{}
				} else {
					yyv701 := &yyv699[yyj699]
					yyv701.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj699 := 0
		for ; !r.CheckBreak(); yyj699++ {

			if yyj699 >= len(yyv699) {
				yyv699 = append(yyv699, ServicePlan{}) // var yyz699 ServicePlan
				yyc699 = true
			}
			yyh699.ElemContainerState(yyj699)
			if yyj699 < len(yyv699) {
				if r.TryDecodeAsNil() {
					yyv699[yyj699] = ServicePlan{}
				} else {
					yyv702 := &yyv699[yyj699]
					yyv702.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj699 < len(yyv699) {
			yyv699 = yyv699[:yyj699]
			yyc699 = true
		} else if yyj699 == 0 && yyv699 == nil {
			yyv699 = []ServicePlan{}
			yyc699 = true
		}
	}
	yyh699.End()
	if yyc699 {
		*v = yyv699
	}
}

func (x codecSelfer1234) encSliceInstance(v []Instance, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv703 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy704 := &yyv703
		yy704.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceInstance(v *[]Instance, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv705 := *v
	yyh705, yyl705 := z.DecSliceHelperStart()
	var yyc705 bool
	if yyl705 == 0 {
		if yyv705 == nil {
			yyv705 = []Instance{}
			yyc705 = true
		} else if len(yyv705) != 0 {
			yyv705 = yyv705[:0]
			yyc705 = true
		}
	} else if yyl705 > 0 {
		var yyrr705, yyrl705 int
		var yyrt705 bool
		if yyl705 > cap(yyv705) {

			yyrg705 := len(yyv705) > 0
			yyv2705 := yyv705
			yyrl705, yyrt705 = z.DecInferLen(yyl705, z.DecBasicHandle().MaxInitLen, 448)
			if yyrt705 {
				if yyrl705 <= cap(yyv705) {
					yyv705 = yyv705[:yyrl705]
				} else {
					yyv705 = make([]Instance, yyrl705)
				}
			} else {
				yyv705 = make([]Instance, yyrl705)
			}
			yyc705 = true
			yyrr705 = len(yyv705)
			if yyrg705 {
				copy(yyv705, yyv2705)
			}
		} else if yyl705 != len(yyv705) {
			yyv705 = yyv705[:yyl705]
			yyc705 = true
		}
		yyj705 := 0
		for ; yyj705 < yyrr705; yyj705++ {
			yyh705.ElemContainerState(yyj705)
			if r.TryDecodeAsNil() {
				yyv705[yyj705] = Instance{}
			} else {
				yyv706 := &yyv705[yyj705]
				yyv706.CodecDecodeSelf(d)
			}

		}
		if yyrt705 {
			for ; yyj705 < yyl705; yyj705++ {
				yyv705 = append(yyv705, Instance{})
				yyh705.ElemContainerState(yyj705)
				if r.TryDecodeAsNil() {
					yyv705[yyj705] = Instance{}
				} else {
					yyv707 := &yyv705[yyj705]
					yyv707.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj705 := 0
		for ; !r.CheckBreak(); yyj705++ {

			if yyj705 >= len(yyv705) {
				yyv705 = append(yyv705, Instance{}) // var yyz705 Instance
				yyc705 = true
			}
			yyh705.ElemContainerState(yyj705)
			if yyj705 < len(yyv705) {
				if r.TryDecodeAsNil() {
					yyv705[yyj705] = Instance{}
				} else {
					yyv708 := &yyv705[yyj705]
					yyv708.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj705 < len(yyv705) {
			yyv705 = yyv705[:yyj705]
			yyc705 = true
		} else if yyj705 == 0 && yyv705 == nil {
			yyv705 = []Instance{}
			yyc705 = true
		}
	}
	yyh705.End()
	if yyc705 {
		*v = yyv705
	}
}

func (x codecSelfer1234) encSliceInstanceCondition(v []InstanceCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv709 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy710 := &yyv709
		yy710.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceInstanceCondition(v *[]InstanceCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv711 := *v
	yyh711, yyl711 := z.DecSliceHelperStart()
	var yyc711 bool
	if yyl711 == 0 {
		if yyv711 == nil {
			yyv711 = []InstanceCondition{}
			yyc711 = true
		} else if len(yyv711) != 0 {
			yyv711 = yyv711[:0]
			yyc711 = true
		}
	} else if yyl711 > 0 {
		var yyrr711, yyrl711 int
		var yyrt711 bool
		if yyl711 > cap(yyv711) {

			yyrg711 := len(yyv711) > 0
			yyv2711 := yyv711
			yyrl711, yyrt711 = z.DecInferLen(yyl711, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt711 {
				if yyrl711 <= cap(yyv711) {
					yyv711 = yyv711[:yyrl711]
				} else {
					yyv711 = make([]InstanceCondition, yyrl711)
				}
			} else {
				yyv711 = make([]InstanceCondition, yyrl711)
			}
			yyc711 = true
			yyrr711 = len(yyv711)
			if yyrg711 {
				copy(yyv711, yyv2711)
			}
		} else if yyl711 != len(yyv711) {
			yyv711 = yyv711[:yyl711]
			yyc711 = true
		}
		yyj711 := 0
		for ; yyj711 < yyrr711; yyj711++ {
			yyh711.ElemContainerState(yyj711)
			if r.TryDecodeAsNil() {
				yyv711[yyj711] = InstanceCondition{}
			} else {
				yyv712 := &yyv711[yyj711]
				yyv712.CodecDecodeSelf(d)
			}

		}
		if yyrt711 {
			for ; yyj711 < yyl711; yyj711++ {
				yyv711 = append(yyv711, InstanceCondition{})
				yyh711.ElemContainerState(yyj711)
				if r.TryDecodeAsNil() {
					yyv711[yyj711] = InstanceCondition{}
				} else {
					yyv713 := &yyv711[yyj711]
					yyv713.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj711 := 0
		for ; !r.CheckBreak(); yyj711++ {

			if yyj711 >= len(yyv711) {
				yyv711 = append(yyv711, InstanceCondition{}) // var yyz711 InstanceCondition
				yyc711 = true
			}
			yyh711.ElemContainerState(yyj711)
			if yyj711 < len(yyv711) {
				if r.TryDecodeAsNil() {
					yyv711[yyj711] = InstanceCondition{}
				} else {
					yyv714 := &yyv711[yyj711]
					yyv714.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj711 < len(yyv711) {
			yyv711 = yyv711[:yyj711]
			yyc711 = true
		} else if yyj711 == 0 && yyv711 == nil {
			yyv711 = []InstanceCondition{}
			yyc711 = true
		}
	}
	yyh711.End()
	if yyc711 {
		*v = yyv711
	}
}

func (x codecSelfer1234) encSliceBinding(v []Binding, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv715 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy716 := &yyv715
		yy716.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceBinding(v *[]Binding, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv717 := *v
	yyh717, yyl717 := z.DecSliceHelperStart()
	var yyc717 bool
	if yyl717 == 0 {
		if yyv717 == nil {
			yyv717 = []Binding{}
			yyc717 = true
		} else if len(yyv717) != 0 {
			yyv717 = yyv717[:0]
			yyc717 = true
		}
	} else if yyl717 > 0 {
		var yyrr717, yyrl717 int
		var yyrt717 bool
		if yyl717 > cap(yyv717) {

			yyrg717 := len(yyv717) > 0
			yyv2717 := yyv717
			yyrl717, yyrt717 = z.DecInferLen(yyl717, z.DecBasicHandle().MaxInitLen, 496)
			if yyrt717 {
				if yyrl717 <= cap(yyv717) {
					yyv717 = yyv717[:yyrl717]
				} else {
					yyv717 = make([]Binding, yyrl717)
				}
			} else {
				yyv717 = make([]Binding, yyrl717)
			}
			yyc717 = true
			yyrr717 = len(yyv717)
			if yyrg717 {
				copy(yyv717, yyv2717)
			}
		} else if yyl717 != len(yyv717) {
			yyv717 = yyv717[:yyl717]
			yyc717 = true
		}
		yyj717 := 0
		for ; yyj717 < yyrr717; yyj717++ {
			yyh717.ElemContainerState(yyj717)
			if r.TryDecodeAsNil() {
				yyv717[yyj717] = Binding{}
			} else {
				yyv718 := &yyv717[yyj717]
				yyv718.CodecDecodeSelf(d)
			}

		}
		if yyrt717 {
			for ; yyj717 < yyl717; yyj717++ {
				yyv717 = append(yyv717, Binding{})
				yyh717.ElemContainerState(yyj717)
				if r.TryDecodeAsNil() {
					yyv717[yyj717] = Binding{}
				} else {
					yyv719 := &yyv717[yyj717]
					yyv719.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj717 := 0
		for ; !r.CheckBreak(); yyj717++ {

			if yyj717 >= len(yyv717) {
				yyv717 = append(yyv717, Binding{}) // var yyz717 Binding
				yyc717 = true
			}
			yyh717.ElemContainerState(yyj717)
			if yyj717 < len(yyv717) {
				if r.TryDecodeAsNil() {
					yyv717[yyj717] = Binding{}
				} else {
					yyv720 := &yyv717[yyj717]
					yyv720.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj717 < len(yyv717) {
			yyv717 = yyv717[:yyj717]
			yyc717 = true
		} else if yyj717 == 0 && yyv717 == nil {
			yyv717 = []Binding{}
			yyc717 = true
		}
	}
	yyh717.End()
	if yyc717 {
		*v = yyv717
	}
}

func (x codecSelfer1234) encSliceBindingCondition(v []BindingCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv721 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy722 := &yyv721
		yy722.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceBindingCondition(v *[]BindingCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv723 := *v
	yyh723, yyl723 := z.DecSliceHelperStart()
	var yyc723 bool
	if yyl723 == 0 {
		if yyv723 == nil {
			yyv723 = []BindingCondition{}
			yyc723 = true
		} else if len(yyv723) != 0 {
			yyv723 = yyv723[:0]
			yyc723 = true
		}
	} else if yyl723 > 0 {
		var yyrr723, yyrl723 int
		var yyrt723 bool
		if yyl723 > cap(yyv723) {

			yyrg723 := len(yyv723) > 0
			yyv2723 := yyv723
			yyrl723, yyrt723 = z.DecInferLen(yyl723, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt723 {
				if yyrl723 <= cap(yyv723) {
					yyv723 = yyv723[:yyrl723]
				} else {
					yyv723 = make([]BindingCondition, yyrl723)
				}
			} else {
				yyv723 = make([]BindingCondition, yyrl723)
			}
			yyc723 = true
			yyrr723 = len(yyv723)
			if yyrg723 {
				copy(yyv723, yyv2723)
			}
		} else if yyl723 != len(yyv723) {
			yyv723 = yyv723[:yyl723]
			yyc723 = true
		}
		yyj723 := 0
		for ; yyj723 < yyrr723; yyj723++ {
			yyh723.ElemContainerState(yyj723)
			if r.TryDecodeAsNil() {
				yyv723[yyj723] = BindingCondition{}
			} else {
				yyv724 := &yyv723[yyj723]
				yyv724.CodecDecodeSelf(d)
			}

		}
		if yyrt723 {
			for ; yyj723 < yyl723; yyj723++ {
				yyv723 = append(yyv723, BindingCondition{})
				yyh723.ElemContainerState(yyj723)
				if r.TryDecodeAsNil() {
					yyv723[yyj723] = BindingCondition{}
				} else {
					yyv725 := &yyv723[yyj723]
					yyv725.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj723 := 0
		for ; !r.CheckBreak(); yyj723++ {

			if yyj723 >= len(yyv723) {
				yyv723 = append(yyv723, BindingCondition{}) // var yyz723 BindingCondition
				yyc723 = true
			}
			yyh723.ElemContainerState(yyj723)
			if yyj723 < len(yyv723) {
				if r.TryDecodeAsNil() {
					yyv723[yyj723] = BindingCondition{}
				} else {
					yyv726 := &yyv723[yyj723]
					yyv726.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj723 < len(yyv723) {
			yyv723 = yyv723[:yyj723]
			yyc723 = true
		} else if yyj723 == 0 && yyv723 == nil {
			yyv723 = []BindingCondition{}
			yyc723 = true
		}
	}
	yyh723.End()
	if yyc723 {
		*v = yyv723
	}
}

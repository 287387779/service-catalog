/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1alpha1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_v1 "k8s.io/kubernetes/pkg/api/v1"
	pkg1_v1 "k8s.io/kubernetes/pkg/apis/meta/v1"
	pkg4_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg2_v1.ObjectMeta
		var v1 pkg1_v1.TypeMeta
		var v2 pkg4_runtime.RawExtension
		var v3 pkg3_types.UID
		var v4 time.Time
		_, _, _, _, _ = v0, v1, v2, v3, v4
	}
}

func (x *Broker) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Kind != ""
			yyq2[1] = x.APIVersion != ""
			yyq2[2] = true
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yy10 := &x.ObjectMeta
					yy10.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy11 := &x.ObjectMeta
					yy11.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy13 := &x.Spec
				yy13.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("spec"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy14 := &x.Spec
				yy14.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy16 := &x.Status
				yy16.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy17 := &x.Status
				yy17.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Broker) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym18 := z.DecBinary()
	_ = yym18
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct19 := r.ContainerType()
		if yyct19 == codecSelferValueTypeMap1234 {
			yyl19 := r.ReadMapStart()
			if yyl19 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl19, d)
			}
		} else if yyct19 == codecSelferValueTypeArray1234 {
			yyl19 := r.ReadArrayStart()
			if yyl19 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl19, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Broker) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys20Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys20Slc
	var yyhl20 bool = l >= 0
	for yyj20 := 0; ; yyj20++ {
		if yyhl20 {
			if yyj20 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys20Slc = r.DecodeBytes(yys20Slc, true, true)
		yys20 := string(yys20Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys20 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv23 := &x.ObjectMeta
				yyv23.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = BrokerSpec{}
			} else {
				yyv24 := &x.Spec
				yyv24.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = BrokerStatus{}
			} else {
				yyv25 := &x.Status
				yyv25.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys20)
		} // end switch yys20
	} // end for yyj20
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Broker) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv29 := &x.ObjectMeta
		yyv29.CodecDecodeSelf(d)
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = BrokerSpec{}
	} else {
		yyv30 := &x.Spec
		yyv30.CodecDecodeSelf(d)
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = BrokerStatus{}
	} else {
		yyv31 := &x.Status
		yyv31.CodecDecodeSelf(d)
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BrokerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym32 := z.EncBinary()
		_ = yym32
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep33 := !z.EncBinary()
			yy2arr33 := z.EncBasicHandle().StructToArray
			var yyq33 [4]bool
			_, _, _ = yysep33, yyq33, yy2arr33
			const yyr33 bool = false
			yyq33[0] = x.Kind != ""
			yyq33[1] = x.APIVersion != ""
			yyq33[2] = true
			var yynn33 int
			if yyr33 || yy2arr33 {
				r.EncodeArrayStart(4)
			} else {
				yynn33 = 1
				for _, b := range yyq33 {
					if b {
						yynn33++
					}
				}
				r.EncodeMapStart(yynn33)
				yynn33 = 0
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq33[0] {
					yym35 := z.EncBinary()
					_ = yym35
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq33[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym36 := z.EncBinary()
					_ = yym36
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq33[1] {
					yym38 := z.EncBinary()
					_ = yym38
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq33[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym39 := z.EncBinary()
					_ = yym39
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq33[2] {
					yy41 := &x.ListMeta
					yym42 := z.EncBinary()
					_ = yym42
					if false {
					} else if z.HasExtensions() && z.EncExt(yy41) {
					} else {
						z.EncFallback(yy41)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq33[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy43 := &x.ListMeta
					yym44 := z.EncBinary()
					_ = yym44
					if false {
					} else if z.HasExtensions() && z.EncExt(yy43) {
					} else {
						z.EncFallback(yy43)
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym46 := z.EncBinary()
					_ = yym46
					if false {
					} else {
						h.encSliceBroker(([]Broker)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym47 := z.EncBinary()
					_ = yym47
					if false {
					} else {
						h.encSliceBroker(([]Broker)(x.Items), e)
					}
				}
			}
			if yyr33 || yy2arr33 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BrokerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym48 := z.DecBinary()
	_ = yym48
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct49 := r.ContainerType()
		if yyct49 == codecSelferValueTypeMap1234 {
			yyl49 := r.ReadMapStart()
			if yyl49 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl49, d)
			}
		} else if yyct49 == codecSelferValueTypeArray1234 {
			yyl49 := r.ReadArrayStart()
			if yyl49 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl49, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BrokerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys50Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys50Slc
	var yyhl50 bool = l >= 0
	for yyj50 := 0; ; yyj50++ {
		if yyhl50 {
			if yyj50 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys50Slc = r.DecodeBytes(yys50Slc, true, true)
		yys50 := string(yys50Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys50 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv53 := &x.ListMeta
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv55 := &x.Items
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else {
					h.decSliceBroker((*[]Broker)(yyv55), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys50)
		} // end switch yys50
	} // end for yyj50
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BrokerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj57 int
	var yyb57 bool
	var yyhl57 bool = l >= 0
	yyj57++
	if yyhl57 {
		yyb57 = yyj57 > l
	} else {
		yyb57 = r.CheckBreak()
	}
	if yyb57 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj57++
	if yyhl57 {
		yyb57 = yyj57 > l
	} else {
		yyb57 = r.CheckBreak()
	}
	if yyb57 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj57++
	if yyhl57 {
		yyb57 = yyj57 > l
	} else {
		yyb57 = r.CheckBreak()
	}
	if yyb57 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv60 := &x.ListMeta
		yym61 := z.DecBinary()
		_ = yym61
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv60) {
		} else {
			z.DecFallback(yyv60, false)
		}
	}
	yyj57++
	if yyhl57 {
		yyb57 = yyj57 > l
	} else {
		yyb57 = r.CheckBreak()
	}
	if yyb57 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv62 := &x.Items
		yym63 := z.DecBinary()
		_ = yym63
		if false {
		} else {
			h.decSliceBroker((*[]Broker)(yyv62), d)
		}
	}
	for {
		yyj57++
		if yyhl57 {
			yyb57 = yyj57 > l
		} else {
			yyb57 = r.CheckBreak()
		}
		if yyb57 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj57-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BrokerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym64 := z.EncBinary()
		_ = yym64
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep65 := !z.EncBinary()
			yy2arr65 := z.EncBasicHandle().StructToArray
			var yyq65 [4]bool
			_, _, _ = yysep65, yyq65, yy2arr65
			const yyr65 bool = false
			var yynn65 int
			if yyr65 || yy2arr65 {
				r.EncodeArrayStart(4)
			} else {
				yynn65 = 4
				for _, b := range yyq65 {
					if b {
						yynn65++
					}
				}
				r.EncodeMapStart(yynn65)
				yynn65 = 0
			}
			if yyr65 || yy2arr65 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym67 := z.EncBinary()
				_ = yym67
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.URL))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("url"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym68 := z.EncBinary()
				_ = yym68
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.URL))
				}
			}
			if yyr65 || yy2arr65 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym70 := z.EncBinary()
				_ = yym70
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.AuthUsername))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("authUsername"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym71 := z.EncBinary()
				_ = yym71
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.AuthUsername))
				}
			}
			if yyr65 || yy2arr65 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym73 := z.EncBinary()
				_ = yym73
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.AuthPassword))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("authPassword"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym74 := z.EncBinary()
				_ = yym74
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.AuthPassword))
				}
			}
			if yyr65 || yy2arr65 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym76 := z.EncBinary()
				_ = yym76
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbGuid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym77 := z.EncBinary()
				_ = yym77
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			}
			if yyr65 || yy2arr65 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BrokerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym78 := z.DecBinary()
	_ = yym78
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct79 := r.ContainerType()
		if yyct79 == codecSelferValueTypeMap1234 {
			yyl79 := r.ReadMapStart()
			if yyl79 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl79, d)
			}
		} else if yyct79 == codecSelferValueTypeArray1234 {
			yyl79 := r.ReadArrayStart()
			if yyl79 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl79, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BrokerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys80Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys80Slc
	var yyhl80 bool = l >= 0
	for yyj80 := 0; ; yyj80++ {
		if yyhl80 {
			if yyj80 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys80Slc = r.DecodeBytes(yys80Slc, true, true)
		yys80 := string(yys80Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys80 {
		case "url":
			if r.TryDecodeAsNil() {
				x.URL = ""
			} else {
				x.URL = string(r.DecodeString())
			}
		case "authUsername":
			if r.TryDecodeAsNil() {
				x.AuthUsername = ""
			} else {
				x.AuthUsername = string(r.DecodeString())
			}
		case "authPassword":
			if r.TryDecodeAsNil() {
				x.AuthPassword = ""
			} else {
				x.AuthPassword = string(r.DecodeString())
			}
		case "osbGuid":
			if r.TryDecodeAsNil() {
				x.OSBGUID = ""
			} else {
				x.OSBGUID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys80)
		} // end switch yys80
	} // end for yyj80
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BrokerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj85 int
	var yyb85 bool
	var yyhl85 bool = l >= 0
	yyj85++
	if yyhl85 {
		yyb85 = yyj85 > l
	} else {
		yyb85 = r.CheckBreak()
	}
	if yyb85 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.URL = ""
	} else {
		x.URL = string(r.DecodeString())
	}
	yyj85++
	if yyhl85 {
		yyb85 = yyj85 > l
	} else {
		yyb85 = r.CheckBreak()
	}
	if yyb85 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AuthUsername = ""
	} else {
		x.AuthUsername = string(r.DecodeString())
	}
	yyj85++
	if yyhl85 {
		yyb85 = yyj85 > l
	} else {
		yyb85 = r.CheckBreak()
	}
	if yyb85 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AuthPassword = ""
	} else {
		x.AuthPassword = string(r.DecodeString())
	}
	yyj85++
	if yyhl85 {
		yyb85 = yyj85 > l
	} else {
		yyb85 = r.CheckBreak()
	}
	if yyb85 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBGUID = ""
	} else {
		x.OSBGUID = string(r.DecodeString())
	}
	for {
		yyj85++
		if yyhl85 {
			yyb85 = yyj85 > l
		} else {
			yyb85 = r.CheckBreak()
		}
		if yyb85 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj85-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BrokerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym90 := z.EncBinary()
		_ = yym90
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep91 := !z.EncBinary()
			yy2arr91 := z.EncBasicHandle().StructToArray
			var yyq91 [1]bool
			_, _, _ = yysep91, yyq91, yy2arr91
			const yyr91 bool = false
			var yynn91 int
			if yyr91 || yy2arr91 {
				r.EncodeArrayStart(1)
			} else {
				yynn91 = 1
				for _, b := range yyq91 {
					if b {
						yynn91++
					}
				}
				r.EncodeMapStart(yynn91)
				yynn91 = 0
			}
			if yyr91 || yy2arr91 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym93 := z.EncBinary()
					_ = yym93
					if false {
					} else {
						h.encSliceBrokerCondition(([]BrokerCondition)(x.Conditions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("conditions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym94 := z.EncBinary()
					_ = yym94
					if false {
					} else {
						h.encSliceBrokerCondition(([]BrokerCondition)(x.Conditions), e)
					}
				}
			}
			if yyr91 || yy2arr91 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BrokerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym95 := z.DecBinary()
	_ = yym95
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct96 := r.ContainerType()
		if yyct96 == codecSelferValueTypeMap1234 {
			yyl96 := r.ReadMapStart()
			if yyl96 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl96, d)
			}
		} else if yyct96 == codecSelferValueTypeArray1234 {
			yyl96 := r.ReadArrayStart()
			if yyl96 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl96, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BrokerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys97Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys97Slc
	var yyhl97 bool = l >= 0
	for yyj97 := 0; ; yyj97++ {
		if yyhl97 {
			if yyj97 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys97Slc = r.DecodeBytes(yys97Slc, true, true)
		yys97 := string(yys97Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys97 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv98 := &x.Conditions
				yym99 := z.DecBinary()
				_ = yym99
				if false {
				} else {
					h.decSliceBrokerCondition((*[]BrokerCondition)(yyv98), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys97)
		} // end switch yys97
	} // end for yyj97
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BrokerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj100 int
	var yyb100 bool
	var yyhl100 bool = l >= 0
	yyj100++
	if yyhl100 {
		yyb100 = yyj100 > l
	} else {
		yyb100 = r.CheckBreak()
	}
	if yyb100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv101 := &x.Conditions
		yym102 := z.DecBinary()
		_ = yym102
		if false {
		} else {
			h.decSliceBrokerCondition((*[]BrokerCondition)(yyv101), d)
		}
	}
	for {
		yyj100++
		if yyhl100 {
			yyb100 = yyj100 > l
		} else {
			yyb100 = r.CheckBreak()
		}
		if yyb100 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj100-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BrokerCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym103 := z.EncBinary()
		_ = yym103
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep104 := !z.EncBinary()
			yy2arr104 := z.EncBasicHandle().StructToArray
			var yyq104 [4]bool
			_, _, _ = yysep104, yyq104, yy2arr104
			const yyr104 bool = false
			var yynn104 int
			if yyr104 || yy2arr104 {
				r.EncodeArrayStart(4)
			} else {
				yynn104 = 4
				for _, b := range yyq104 {
					if b {
						yynn104++
					}
				}
				r.EncodeMapStart(yynn104)
				yynn104 = 0
			}
			if yyr104 || yy2arr104 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr104 || yy2arr104 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr104 || yy2arr104 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym108 := z.EncBinary()
				_ = yym108
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("reason"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym109 := z.EncBinary()
				_ = yym109
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			}
			if yyr104 || yy2arr104 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym111 := z.EncBinary()
				_ = yym111
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("message"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym112 := z.EncBinary()
				_ = yym112
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			}
			if yyr104 || yy2arr104 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BrokerCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym113 := z.DecBinary()
	_ = yym113
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct114 := r.ContainerType()
		if yyct114 == codecSelferValueTypeMap1234 {
			yyl114 := r.ReadMapStart()
			if yyl114 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl114, d)
			}
		} else if yyct114 == codecSelferValueTypeArray1234 {
			yyl114 := r.ReadArrayStart()
			if yyl114 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl114, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BrokerCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys115Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys115Slc
	var yyhl115 bool = l >= 0
	for yyj115 := 0; ; yyj115++ {
		if yyhl115 {
			if yyj115 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys115Slc = r.DecodeBytes(yys115Slc, true, true)
		yys115 := string(yys115Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys115 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = BrokerConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys115)
		} // end switch yys115
	} // end for yyj115
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BrokerCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj120 int
	var yyb120 bool
	var yyhl120 bool = l >= 0
	yyj120++
	if yyhl120 {
		yyb120 = yyj120 > l
	} else {
		yyb120 = r.CheckBreak()
	}
	if yyb120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = BrokerConditionType(r.DecodeString())
	}
	yyj120++
	if yyhl120 {
		yyb120 = yyj120 > l
	} else {
		yyb120 = r.CheckBreak()
	}
	if yyb120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj120++
	if yyhl120 {
		yyb120 = yyj120 > l
	} else {
		yyb120 = r.CheckBreak()
	}
	if yyb120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj120++
	if yyhl120 {
		yyb120 = yyj120 > l
	} else {
		yyb120 = r.CheckBreak()
	}
	if yyb120 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj120++
		if yyhl120 {
			yyb120 = yyj120 > l
		} else {
			yyb120 = r.CheckBreak()
		}
		if yyb120 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj120-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x BrokerConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym125 := z.EncBinary()
	_ = yym125
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *BrokerConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym126 := z.DecBinary()
	_ = yym126
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym127 := z.EncBinary()
	_ = yym127
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym128 := z.DecBinary()
	_ = yym128
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceClassList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym129 := z.EncBinary()
		_ = yym129
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep130 := !z.EncBinary()
			yy2arr130 := z.EncBasicHandle().StructToArray
			var yyq130 [4]bool
			_, _, _ = yysep130, yyq130, yy2arr130
			const yyr130 bool = false
			yyq130[0] = x.Kind != ""
			yyq130[1] = x.APIVersion != ""
			yyq130[2] = true
			var yynn130 int
			if yyr130 || yy2arr130 {
				r.EncodeArrayStart(4)
			} else {
				yynn130 = 1
				for _, b := range yyq130 {
					if b {
						yynn130++
					}
				}
				r.EncodeMapStart(yynn130)
				yynn130 = 0
			}
			if yyr130 || yy2arr130 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq130[0] {
					yym132 := z.EncBinary()
					_ = yym132
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq130[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym133 := z.EncBinary()
					_ = yym133
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr130 || yy2arr130 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq130[1] {
					yym135 := z.EncBinary()
					_ = yym135
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq130[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym136 := z.EncBinary()
					_ = yym136
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr130 || yy2arr130 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq130[2] {
					yy138 := &x.ListMeta
					yym139 := z.EncBinary()
					_ = yym139
					if false {
					} else if z.HasExtensions() && z.EncExt(yy138) {
					} else {
						z.EncFallback(yy138)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq130[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy140 := &x.ListMeta
					yym141 := z.EncBinary()
					_ = yym141
					if false {
					} else if z.HasExtensions() && z.EncExt(yy140) {
					} else {
						z.EncFallback(yy140)
					}
				}
			}
			if yyr130 || yy2arr130 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym143 := z.EncBinary()
					_ = yym143
					if false {
					} else {
						h.encSliceServiceClass(([]ServiceClass)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym144 := z.EncBinary()
					_ = yym144
					if false {
					} else {
						h.encSliceServiceClass(([]ServiceClass)(x.Items), e)
					}
				}
			}
			if yyr130 || yy2arr130 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceClassList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym145 := z.DecBinary()
	_ = yym145
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct146 := r.ContainerType()
		if yyct146 == codecSelferValueTypeMap1234 {
			yyl146 := r.ReadMapStart()
			if yyl146 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl146, d)
			}
		} else if yyct146 == codecSelferValueTypeArray1234 {
			yyl146 := r.ReadArrayStart()
			if yyl146 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl146, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceClassList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys147Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys147Slc
	var yyhl147 bool = l >= 0
	for yyj147 := 0; ; yyj147++ {
		if yyhl147 {
			if yyj147 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys147Slc = r.DecodeBytes(yys147Slc, true, true)
		yys147 := string(yys147Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys147 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv150 := &x.ListMeta
				yym151 := z.DecBinary()
				_ = yym151
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv150) {
				} else {
					z.DecFallback(yyv150, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv152 := &x.Items
				yym153 := z.DecBinary()
				_ = yym153
				if false {
				} else {
					h.decSliceServiceClass((*[]ServiceClass)(yyv152), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys147)
		} // end switch yys147
	} // end for yyj147
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceClassList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj154 int
	var yyb154 bool
	var yyhl154 bool = l >= 0
	yyj154++
	if yyhl154 {
		yyb154 = yyj154 > l
	} else {
		yyb154 = r.CheckBreak()
	}
	if yyb154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj154++
	if yyhl154 {
		yyb154 = yyj154 > l
	} else {
		yyb154 = r.CheckBreak()
	}
	if yyb154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj154++
	if yyhl154 {
		yyb154 = yyj154 > l
	} else {
		yyb154 = r.CheckBreak()
	}
	if yyb154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv157 := &x.ListMeta
		yym158 := z.DecBinary()
		_ = yym158
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv157) {
		} else {
			z.DecFallback(yyv157, false)
		}
	}
	yyj154++
	if yyhl154 {
		yyb154 = yyj154 > l
	} else {
		yyb154 = r.CheckBreak()
	}
	if yyb154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv159 := &x.Items
		yym160 := z.DecBinary()
		_ = yym160
		if false {
		} else {
			h.decSliceServiceClass((*[]ServiceClass)(yyv159), d)
		}
	}
	for {
		yyj154++
		if yyhl154 {
			yyb154 = yyj154 > l
		} else {
			yyb154 = r.CheckBreak()
		}
		if yyb154 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj154-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceClass) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym161 := z.EncBinary()
		_ = yym161
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep162 := !z.EncBinary()
			yy2arr162 := z.EncBasicHandle().StructToArray
			var yyq162 [21]bool
			_, _, _ = yysep162, yyq162, yy2arr162
			const yyr162 bool = false
			yyq162[0] = x.Kind != ""
			yyq162[1] = x.APIVersion != ""
			yyq162[2] = true
			yyq162[14] = x.Description != ""
			yyq162[15] = x.DisplayName != ""
			yyq162[16] = x.ImageURL != ""
			yyq162[17] = x.LongDescription != ""
			yyq162[18] = x.ProviderDisplayName != ""
			yyq162[19] = x.DocumentationURL != ""
			yyq162[20] = x.SupportURL != ""
			var yynn162 int
			if yyr162 || yy2arr162 {
				r.EncodeArrayStart(21)
			} else {
				yynn162 = 11
				for _, b := range yyq162 {
					if b {
						yynn162++
					}
				}
				r.EncodeMapStart(yynn162)
				yynn162 = 0
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq162[0] {
					yym164 := z.EncBinary()
					_ = yym164
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq162[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym165 := z.EncBinary()
					_ = yym165
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq162[1] {
					yym167 := z.EncBinary()
					_ = yym167
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq162[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym168 := z.EncBinary()
					_ = yym168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq162[2] {
					yy170 := &x.ObjectMeta
					yy170.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq162[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy171 := &x.ObjectMeta
					yy171.CodecEncodeSelf(e)
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym173 := z.EncBinary()
				_ = yym173
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BrokerName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("brokerName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym174 := z.EncBinary()
				_ = yym174
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BrokerName))
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym176 := z.EncBinary()
				_ = yym176
				if false {
				} else {
					r.EncodeBool(bool(x.Bindable))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bindable"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym177 := z.EncBinary()
				_ = yym177
				if false {
				} else {
					r.EncodeBool(bool(x.Bindable))
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Plans == nil {
					r.EncodeNil()
				} else {
					yym179 := z.EncBinary()
					_ = yym179
					if false {
					} else {
						h.encSliceServicePlan(([]ServicePlan)(x.Plans), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("plans"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Plans == nil {
					r.EncodeNil()
				} else {
					yym180 := z.EncBinary()
					_ = yym180
					if false {
					} else {
						h.encSliceServicePlan(([]ServicePlan)(x.Plans), e)
					}
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym182 := z.EncBinary()
				_ = yym182
				if false {
				} else {
					r.EncodeBool(bool(x.PlanUpdatable))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("planUpdatable"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym183 := z.EncBinary()
				_ = yym183
				if false {
				} else {
					r.EncodeBool(bool(x.PlanUpdatable))
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym185 := z.EncBinary()
				_ = yym185
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbGuid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym186 := z.EncBinary()
				_ = yym186
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.OSBTags == nil {
					r.EncodeNil()
				} else {
					yym188 := z.EncBinary()
					_ = yym188
					if false {
					} else {
						z.F.EncSliceStringV(x.OSBTags, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbTags"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.OSBTags == nil {
					r.EncodeNil()
				} else {
					yym189 := z.EncBinary()
					_ = yym189
					if false {
					} else {
						z.F.EncSliceStringV(x.OSBTags, false, e)
					}
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.OSBRequires == nil {
					r.EncodeNil()
				} else {
					yym191 := z.EncBinary()
					_ = yym191
					if false {
					} else {
						z.F.EncSliceStringV(x.OSBRequires, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbRequires"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.OSBRequires == nil {
					r.EncodeNil()
				} else {
					yym192 := z.EncBinary()
					_ = yym192
					if false {
					} else {
						z.F.EncSliceStringV(x.OSBRequires, false, e)
					}
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym194 := z.EncBinary()
				_ = yym194
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBMaxDBPerNode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbMaxDBPerNode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym195 := z.EncBinary()
				_ = yym195
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBMaxDBPerNode))
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym197 := z.EncBinary()
				_ = yym197
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBDashboardOAuth2ClientID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbDashboardOAuth2ClientID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym198 := z.EncBinary()
				_ = yym198
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBDashboardOAuth2ClientID))
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym200 := z.EncBinary()
				_ = yym200
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBDashboardSecret))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbDashboardSecret"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym201 := z.EncBinary()
				_ = yym201
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBDashboardSecret))
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym203 := z.EncBinary()
				_ = yym203
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBDashboardRedirectURI))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbDashboardRedirectURI"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym204 := z.EncBinary()
				_ = yym204
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBDashboardRedirectURI))
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq162[14] {
					yym206 := z.EncBinary()
					_ = yym206
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq162[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym207 := z.EncBinary()
					_ = yym207
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq162[15] {
					yym209 := z.EncBinary()
					_ = yym209
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DisplayName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq162[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("displayName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym210 := z.EncBinary()
					_ = yym210
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DisplayName))
					}
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq162[16] {
					yym212 := z.EncBinary()
					_ = yym212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ImageURL))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq162[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imageUrl"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym213 := z.EncBinary()
					_ = yym213
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ImageURL))
					}
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq162[17] {
					yym215 := z.EncBinary()
					_ = yym215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LongDescription))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq162[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("longDescription"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym216 := z.EncBinary()
					_ = yym216
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LongDescription))
					}
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq162[18] {
					yym218 := z.EncBinary()
					_ = yym218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderDisplayName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq162[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerDisplayName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym219 := z.EncBinary()
					_ = yym219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderDisplayName))
					}
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq162[19] {
					yym221 := z.EncBinary()
					_ = yym221
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DocumentationURL))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq162[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("documentationUrl"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym222 := z.EncBinary()
					_ = yym222
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DocumentationURL))
					}
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq162[20] {
					yym224 := z.EncBinary()
					_ = yym224
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SupportURL))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq162[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supportUrl"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym225 := z.EncBinary()
					_ = yym225
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SupportURL))
					}
				}
			}
			if yyr162 || yy2arr162 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceClass) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym226 := z.DecBinary()
	_ = yym226
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct227 := r.ContainerType()
		if yyct227 == codecSelferValueTypeMap1234 {
			yyl227 := r.ReadMapStart()
			if yyl227 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl227, d)
			}
		} else if yyct227 == codecSelferValueTypeArray1234 {
			yyl227 := r.ReadArrayStart()
			if yyl227 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl227, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceClass) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys228Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys228Slc
	var yyhl228 bool = l >= 0
	for yyj228 := 0; ; yyj228++ {
		if yyhl228 {
			if yyj228 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys228Slc = r.DecodeBytes(yys228Slc, true, true)
		yys228 := string(yys228Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys228 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv231 := &x.ObjectMeta
				yyv231.CodecDecodeSelf(d)
			}
		case "brokerName":
			if r.TryDecodeAsNil() {
				x.BrokerName = ""
			} else {
				x.BrokerName = string(r.DecodeString())
			}
		case "bindable":
			if r.TryDecodeAsNil() {
				x.Bindable = false
			} else {
				x.Bindable = bool(r.DecodeBool())
			}
		case "plans":
			if r.TryDecodeAsNil() {
				x.Plans = nil
			} else {
				yyv234 := &x.Plans
				yym235 := z.DecBinary()
				_ = yym235
				if false {
				} else {
					h.decSliceServicePlan((*[]ServicePlan)(yyv234), d)
				}
			}
		case "planUpdatable":
			if r.TryDecodeAsNil() {
				x.PlanUpdatable = false
			} else {
				x.PlanUpdatable = bool(r.DecodeBool())
			}
		case "osbGuid":
			if r.TryDecodeAsNil() {
				x.OSBGUID = ""
			} else {
				x.OSBGUID = string(r.DecodeString())
			}
		case "osbTags":
			if r.TryDecodeAsNil() {
				x.OSBTags = nil
			} else {
				yyv238 := &x.OSBTags
				yym239 := z.DecBinary()
				_ = yym239
				if false {
				} else {
					z.F.DecSliceStringX(yyv238, false, d)
				}
			}
		case "osbRequires":
			if r.TryDecodeAsNil() {
				x.OSBRequires = nil
			} else {
				yyv240 := &x.OSBRequires
				yym241 := z.DecBinary()
				_ = yym241
				if false {
				} else {
					z.F.DecSliceStringX(yyv240, false, d)
				}
			}
		case "osbMaxDBPerNode":
			if r.TryDecodeAsNil() {
				x.OSBMaxDBPerNode = ""
			} else {
				x.OSBMaxDBPerNode = string(r.DecodeString())
			}
		case "osbDashboardOAuth2ClientID":
			if r.TryDecodeAsNil() {
				x.OSBDashboardOAuth2ClientID = ""
			} else {
				x.OSBDashboardOAuth2ClientID = string(r.DecodeString())
			}
		case "osbDashboardSecret":
			if r.TryDecodeAsNil() {
				x.OSBDashboardSecret = ""
			} else {
				x.OSBDashboardSecret = string(r.DecodeString())
			}
		case "osbDashboardRedirectURI":
			if r.TryDecodeAsNil() {
				x.OSBDashboardRedirectURI = ""
			} else {
				x.OSBDashboardRedirectURI = string(r.DecodeString())
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "displayName":
			if r.TryDecodeAsNil() {
				x.DisplayName = ""
			} else {
				x.DisplayName = string(r.DecodeString())
			}
		case "imageUrl":
			if r.TryDecodeAsNil() {
				x.ImageURL = ""
			} else {
				x.ImageURL = string(r.DecodeString())
			}
		case "longDescription":
			if r.TryDecodeAsNil() {
				x.LongDescription = ""
			} else {
				x.LongDescription = string(r.DecodeString())
			}
		case "providerDisplayName":
			if r.TryDecodeAsNil() {
				x.ProviderDisplayName = ""
			} else {
				x.ProviderDisplayName = string(r.DecodeString())
			}
		case "documentationUrl":
			if r.TryDecodeAsNil() {
				x.DocumentationURL = ""
			} else {
				x.DocumentationURL = string(r.DecodeString())
			}
		case "supportUrl":
			if r.TryDecodeAsNil() {
				x.SupportURL = ""
			} else {
				x.SupportURL = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys228)
		} // end switch yys228
	} // end for yyj228
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceClass) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj253 int
	var yyb253 bool
	var yyhl253 bool = l >= 0
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv256 := &x.ObjectMeta
		yyv256.CodecDecodeSelf(d)
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BrokerName = ""
	} else {
		x.BrokerName = string(r.DecodeString())
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Bindable = false
	} else {
		x.Bindable = bool(r.DecodeBool())
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Plans = nil
	} else {
		yyv259 := &x.Plans
		yym260 := z.DecBinary()
		_ = yym260
		if false {
		} else {
			h.decSliceServicePlan((*[]ServicePlan)(yyv259), d)
		}
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PlanUpdatable = false
	} else {
		x.PlanUpdatable = bool(r.DecodeBool())
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBGUID = ""
	} else {
		x.OSBGUID = string(r.DecodeString())
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBTags = nil
	} else {
		yyv263 := &x.OSBTags
		yym264 := z.DecBinary()
		_ = yym264
		if false {
		} else {
			z.F.DecSliceStringX(yyv263, false, d)
		}
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBRequires = nil
	} else {
		yyv265 := &x.OSBRequires
		yym266 := z.DecBinary()
		_ = yym266
		if false {
		} else {
			z.F.DecSliceStringX(yyv265, false, d)
		}
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBMaxDBPerNode = ""
	} else {
		x.OSBMaxDBPerNode = string(r.DecodeString())
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBDashboardOAuth2ClientID = ""
	} else {
		x.OSBDashboardOAuth2ClientID = string(r.DecodeString())
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBDashboardSecret = ""
	} else {
		x.OSBDashboardSecret = string(r.DecodeString())
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBDashboardRedirectURI = ""
	} else {
		x.OSBDashboardRedirectURI = string(r.DecodeString())
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DisplayName = ""
	} else {
		x.DisplayName = string(r.DecodeString())
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageURL = ""
	} else {
		x.ImageURL = string(r.DecodeString())
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LongDescription = ""
	} else {
		x.LongDescription = string(r.DecodeString())
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderDisplayName = ""
	} else {
		x.ProviderDisplayName = string(r.DecodeString())
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DocumentationURL = ""
	} else {
		x.DocumentationURL = string(r.DecodeString())
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupportURL = ""
	} else {
		x.SupportURL = string(r.DecodeString())
	}
	for {
		yyj253++
		if yyhl253 {
			yyb253 = yyj253 > l
		} else {
			yyb253 = r.CheckBreak()
		}
		if yyb253 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj253-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePlan) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym278 := z.EncBinary()
		_ = yym278
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep279 := !z.EncBinary()
			yy2arr279 := z.EncBasicHandle().StructToArray
			var yyq279 [6]bool
			_, _, _ = yysep279, yyq279, yy2arr279
			const yyr279 bool = false
			yyq279[3] = x.Description != ""
			yyq279[4] = len(x.Bullets) != 0
			yyq279[5] = x.DisplayName != ""
			var yynn279 int
			if yyr279 || yy2arr279 {
				r.EncodeArrayStart(6)
			} else {
				yynn279 = 3
				for _, b := range yyq279 {
					if b {
						yynn279++
					}
				}
				r.EncodeMapStart(yynn279)
				yynn279 = 0
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym281 := z.EncBinary()
				_ = yym281
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym282 := z.EncBinary()
				_ = yym282
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym284 := z.EncBinary()
				_ = yym284
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbGuid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym285 := z.EncBinary()
				_ = yym285
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym287 := z.EncBinary()
				_ = yym287
				if false {
				} else {
					r.EncodeBool(bool(x.OSBFree))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbFree"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym288 := z.EncBinary()
				_ = yym288
				if false {
				} else {
					r.EncodeBool(bool(x.OSBFree))
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[3] {
					yym290 := z.EncBinary()
					_ = yym290
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq279[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym291 := z.EncBinary()
					_ = yym291
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[4] {
					if x.Bullets == nil {
						r.EncodeNil()
					} else {
						yym293 := z.EncBinary()
						_ = yym293
						if false {
						} else {
							z.F.EncSliceStringV(x.Bullets, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq279[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("bullets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Bullets == nil {
						r.EncodeNil()
					} else {
						yym294 := z.EncBinary()
						_ = yym294
						if false {
						} else {
							z.F.EncSliceStringV(x.Bullets, false, e)
						}
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq279[5] {
					yym296 := z.EncBinary()
					_ = yym296
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DisplayName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq279[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("displayName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym297 := z.EncBinary()
					_ = yym297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.DisplayName))
					}
				}
			}
			if yyr279 || yy2arr279 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePlan) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym298 := z.DecBinary()
	_ = yym298
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct299 := r.ContainerType()
		if yyct299 == codecSelferValueTypeMap1234 {
			yyl299 := r.ReadMapStart()
			if yyl299 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl299, d)
			}
		} else if yyct299 == codecSelferValueTypeArray1234 {
			yyl299 := r.ReadArrayStart()
			if yyl299 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl299, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePlan) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys300Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys300Slc
	var yyhl300 bool = l >= 0
	for yyj300 := 0; ; yyj300++ {
		if yyhl300 {
			if yyj300 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys300Slc = r.DecodeBytes(yys300Slc, true, true)
		yys300 := string(yys300Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys300 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "osbGuid":
			if r.TryDecodeAsNil() {
				x.OSBGUID = ""
			} else {
				x.OSBGUID = string(r.DecodeString())
			}
		case "osbFree":
			if r.TryDecodeAsNil() {
				x.OSBFree = false
			} else {
				x.OSBFree = bool(r.DecodeBool())
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "bullets":
			if r.TryDecodeAsNil() {
				x.Bullets = nil
			} else {
				yyv305 := &x.Bullets
				yym306 := z.DecBinary()
				_ = yym306
				if false {
				} else {
					z.F.DecSliceStringX(yyv305, false, d)
				}
			}
		case "displayName":
			if r.TryDecodeAsNil() {
				x.DisplayName = ""
			} else {
				x.DisplayName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys300)
		} // end switch yys300
	} // end for yyj300
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePlan) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj308 int
	var yyb308 bool
	var yyhl308 bool = l >= 0
	yyj308++
	if yyhl308 {
		yyb308 = yyj308 > l
	} else {
		yyb308 = r.CheckBreak()
	}
	if yyb308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj308++
	if yyhl308 {
		yyb308 = yyj308 > l
	} else {
		yyb308 = r.CheckBreak()
	}
	if yyb308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBGUID = ""
	} else {
		x.OSBGUID = string(r.DecodeString())
	}
	yyj308++
	if yyhl308 {
		yyb308 = yyj308 > l
	} else {
		yyb308 = r.CheckBreak()
	}
	if yyb308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBFree = false
	} else {
		x.OSBFree = bool(r.DecodeBool())
	}
	yyj308++
	if yyhl308 {
		yyb308 = yyj308 > l
	} else {
		yyb308 = r.CheckBreak()
	}
	if yyb308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj308++
	if yyhl308 {
		yyb308 = yyj308 > l
	} else {
		yyb308 = r.CheckBreak()
	}
	if yyb308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Bullets = nil
	} else {
		yyv313 := &x.Bullets
		yym314 := z.DecBinary()
		_ = yym314
		if false {
		} else {
			z.F.DecSliceStringX(yyv313, false, d)
		}
	}
	yyj308++
	if yyhl308 {
		yyb308 = yyj308 > l
	} else {
		yyb308 = r.CheckBreak()
	}
	if yyb308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DisplayName = ""
	} else {
		x.DisplayName = string(r.DecodeString())
	}
	for {
		yyj308++
		if yyhl308 {
			yyb308 = yyj308 > l
		} else {
			yyb308 = r.CheckBreak()
		}
		if yyb308 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj308-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym316 := z.EncBinary()
		_ = yym316
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep317 := !z.EncBinary()
			yy2arr317 := z.EncBasicHandle().StructToArray
			var yyq317 [4]bool
			_, _, _ = yysep317, yyq317, yy2arr317
			const yyr317 bool = false
			yyq317[0] = x.Kind != ""
			yyq317[1] = x.APIVersion != ""
			yyq317[2] = true
			var yynn317 int
			if yyr317 || yy2arr317 {
				r.EncodeArrayStart(4)
			} else {
				yynn317 = 1
				for _, b := range yyq317 {
					if b {
						yynn317++
					}
				}
				r.EncodeMapStart(yynn317)
				yynn317 = 0
			}
			if yyr317 || yy2arr317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq317[0] {
					yym319 := z.EncBinary()
					_ = yym319
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq317[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym320 := z.EncBinary()
					_ = yym320
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr317 || yy2arr317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq317[1] {
					yym322 := z.EncBinary()
					_ = yym322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq317[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym323 := z.EncBinary()
					_ = yym323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr317 || yy2arr317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq317[2] {
					yy325 := &x.ListMeta
					yym326 := z.EncBinary()
					_ = yym326
					if false {
					} else if z.HasExtensions() && z.EncExt(yy325) {
					} else {
						z.EncFallback(yy325)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq317[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy327 := &x.ListMeta
					yym328 := z.EncBinary()
					_ = yym328
					if false {
					} else if z.HasExtensions() && z.EncExt(yy327) {
					} else {
						z.EncFallback(yy327)
					}
				}
			}
			if yyr317 || yy2arr317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym330 := z.EncBinary()
					_ = yym330
					if false {
					} else {
						h.encSliceInstance(([]Instance)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym331 := z.EncBinary()
					_ = yym331
					if false {
					} else {
						h.encSliceInstance(([]Instance)(x.Items), e)
					}
				}
			}
			if yyr317 || yy2arr317 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym332 := z.DecBinary()
	_ = yym332
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct333 := r.ContainerType()
		if yyct333 == codecSelferValueTypeMap1234 {
			yyl333 := r.ReadMapStart()
			if yyl333 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl333, d)
			}
		} else if yyct333 == codecSelferValueTypeArray1234 {
			yyl333 := r.ReadArrayStart()
			if yyl333 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl333, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys334Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys334Slc
	var yyhl334 bool = l >= 0
	for yyj334 := 0; ; yyj334++ {
		if yyhl334 {
			if yyj334 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys334Slc = r.DecodeBytes(yys334Slc, true, true)
		yys334 := string(yys334Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys334 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv337 := &x.ListMeta
				yym338 := z.DecBinary()
				_ = yym338
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv337) {
				} else {
					z.DecFallback(yyv337, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv339 := &x.Items
				yym340 := z.DecBinary()
				_ = yym340
				if false {
				} else {
					h.decSliceInstance((*[]Instance)(yyv339), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys334)
		} // end switch yys334
	} // end for yyj334
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj341 int
	var yyb341 bool
	var yyhl341 bool = l >= 0
	yyj341++
	if yyhl341 {
		yyb341 = yyj341 > l
	} else {
		yyb341 = r.CheckBreak()
	}
	if yyb341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj341++
	if yyhl341 {
		yyb341 = yyj341 > l
	} else {
		yyb341 = r.CheckBreak()
	}
	if yyb341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj341++
	if yyhl341 {
		yyb341 = yyj341 > l
	} else {
		yyb341 = r.CheckBreak()
	}
	if yyb341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv344 := &x.ListMeta
		yym345 := z.DecBinary()
		_ = yym345
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv344) {
		} else {
			z.DecFallback(yyv344, false)
		}
	}
	yyj341++
	if yyhl341 {
		yyb341 = yyj341 > l
	} else {
		yyb341 = r.CheckBreak()
	}
	if yyb341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv346 := &x.Items
		yym347 := z.DecBinary()
		_ = yym347
		if false {
		} else {
			h.decSliceInstance((*[]Instance)(yyv346), d)
		}
	}
	for {
		yyj341++
		if yyhl341 {
			yyb341 = yyj341 > l
		} else {
			yyb341 = r.CheckBreak()
		}
		if yyb341 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj341-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Instance) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym348 := z.EncBinary()
		_ = yym348
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep349 := !z.EncBinary()
			yy2arr349 := z.EncBasicHandle().StructToArray
			var yyq349 [5]bool
			_, _, _ = yysep349, yyq349, yy2arr349
			const yyr349 bool = false
			yyq349[0] = x.Kind != ""
			yyq349[1] = x.APIVersion != ""
			yyq349[2] = true
			var yynn349 int
			if yyr349 || yy2arr349 {
				r.EncodeArrayStart(5)
			} else {
				yynn349 = 2
				for _, b := range yyq349 {
					if b {
						yynn349++
					}
				}
				r.EncodeMapStart(yynn349)
				yynn349 = 0
			}
			if yyr349 || yy2arr349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq349[0] {
					yym351 := z.EncBinary()
					_ = yym351
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq349[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym352 := z.EncBinary()
					_ = yym352
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr349 || yy2arr349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq349[1] {
					yym354 := z.EncBinary()
					_ = yym354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq349[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym355 := z.EncBinary()
					_ = yym355
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr349 || yy2arr349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq349[2] {
					yy357 := &x.ObjectMeta
					yy357.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq349[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy358 := &x.ObjectMeta
					yy358.CodecEncodeSelf(e)
				}
			}
			if yyr349 || yy2arr349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy360 := &x.Spec
				yy360.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("spec"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy361 := &x.Spec
				yy361.CodecEncodeSelf(e)
			}
			if yyr349 || yy2arr349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy363 := &x.Status
				yy363.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy364 := &x.Status
				yy364.CodecEncodeSelf(e)
			}
			if yyr349 || yy2arr349 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Instance) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym365 := z.DecBinary()
	_ = yym365
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct366 := r.ContainerType()
		if yyct366 == codecSelferValueTypeMap1234 {
			yyl366 := r.ReadMapStart()
			if yyl366 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl366, d)
			}
		} else if yyct366 == codecSelferValueTypeArray1234 {
			yyl366 := r.ReadArrayStart()
			if yyl366 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl366, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Instance) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys367Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys367Slc
	var yyhl367 bool = l >= 0
	for yyj367 := 0; ; yyj367++ {
		if yyhl367 {
			if yyj367 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys367Slc = r.DecodeBytes(yys367Slc, true, true)
		yys367 := string(yys367Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys367 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv370 := &x.ObjectMeta
				yyv370.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = InstanceSpec{}
			} else {
				yyv371 := &x.Spec
				yyv371.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = InstanceStatus{}
			} else {
				yyv372 := &x.Status
				yyv372.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys367)
		} // end switch yys367
	} // end for yyj367
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Instance) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj373 int
	var yyb373 bool
	var yyhl373 bool = l >= 0
	yyj373++
	if yyhl373 {
		yyb373 = yyj373 > l
	} else {
		yyb373 = r.CheckBreak()
	}
	if yyb373 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj373++
	if yyhl373 {
		yyb373 = yyj373 > l
	} else {
		yyb373 = r.CheckBreak()
	}
	if yyb373 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj373++
	if yyhl373 {
		yyb373 = yyj373 > l
	} else {
		yyb373 = r.CheckBreak()
	}
	if yyb373 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv376 := &x.ObjectMeta
		yyv376.CodecDecodeSelf(d)
	}
	yyj373++
	if yyhl373 {
		yyb373 = yyj373 > l
	} else {
		yyb373 = r.CheckBreak()
	}
	if yyb373 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = InstanceSpec{}
	} else {
		yyv377 := &x.Spec
		yyv377.CodecDecodeSelf(d)
	}
	yyj373++
	if yyhl373 {
		yyb373 = yyj373 > l
	} else {
		yyb373 = r.CheckBreak()
	}
	if yyb373 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = InstanceStatus{}
	} else {
		yyv378 := &x.Status
		yyv378.CodecDecodeSelf(d)
	}
	for {
		yyj373++
		if yyhl373 {
			yyb373 = yyj373 > l
		} else {
			yyb373 = r.CheckBreak()
		}
		if yyb373 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj373-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym379 := z.EncBinary()
		_ = yym379
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep380 := !z.EncBinary()
			yy2arr380 := z.EncBasicHandle().StructToArray
			var yyq380 [12]bool
			_, _, _ = yysep380, yyq380, yy2arr380
			const yyr380 bool = false
			var yynn380 int
			if yyr380 || yy2arr380 {
				r.EncodeArrayStart(12)
			} else {
				yynn380 = 12
				for _, b := range yyq380 {
					if b {
						yynn380++
					}
				}
				r.EncodeMapStart(yynn380)
				yynn380 = 0
			}
			if yyr380 || yy2arr380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym382 := z.EncBinary()
				_ = yym382
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceClassName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceClassName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym383 := z.EncBinary()
				_ = yym383
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceClassName))
				}
			}
			if yyr380 || yy2arr380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym385 := z.EncBinary()
				_ = yym385
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PlanName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("planName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym386 := z.EncBinary()
				_ = yym386
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PlanName))
				}
			}
			if yyr380 || yy2arr380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Parameters == nil {
					r.EncodeNil()
				} else {
					yym388 := z.EncBinary()
					_ = yym388
					if false {
					} else {
						h.encMapstringruntime_RawExtension((map[string]pkg4_runtime.RawExtension)(x.Parameters), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("parameters"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Parameters == nil {
					r.EncodeNil()
				} else {
					yym389 := z.EncBinary()
					_ = yym389
					if false {
					} else {
						h.encMapstringruntime_RawExtension((map[string]pkg4_runtime.RawExtension)(x.Parameters), e)
					}
				}
			}
			if yyr380 || yy2arr380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym391 := z.EncBinary()
				_ = yym391
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbGuid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym392 := z.EncBinary()
				_ = yym392
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			}
			if yyr380 || yy2arr380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym394 := z.EncBinary()
				_ = yym394
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBCredentials))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbCredentials"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym395 := z.EncBinary()
				_ = yym395
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBCredentials))
				}
			}
			if yyr380 || yy2arr380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym397 := z.EncBinary()
				_ = yym397
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBDashboardURL))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbDashboardURL"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym398 := z.EncBinary()
				_ = yym398
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBDashboardURL))
				}
			}
			if yyr380 || yy2arr380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym400 := z.EncBinary()
				_ = yym400
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBInternalID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbInternalID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym401 := z.EncBinary()
				_ = yym401
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBInternalID))
				}
			}
			if yyr380 || yy2arr380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym403 := z.EncBinary()
				_ = yym403
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBServiceID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbServiceID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym404 := z.EncBinary()
				_ = yym404
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBServiceID))
				}
			}
			if yyr380 || yy2arr380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym406 := z.EncBinary()
				_ = yym406
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBPlanID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbPlanID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym407 := z.EncBinary()
				_ = yym407
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBPlanID))
				}
			}
			if yyr380 || yy2arr380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym409 := z.EncBinary()
				_ = yym409
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbType"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym410 := z.EncBinary()
				_ = yym410
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBType))
				}
			}
			if yyr380 || yy2arr380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym412 := z.EncBinary()
				_ = yym412
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBSpaceGUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbSpaceGUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym413 := z.EncBinary()
				_ = yym413
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBSpaceGUID))
				}
			}
			if yyr380 || yy2arr380 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym415 := z.EncBinary()
				_ = yym415
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBLastOperation))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbLastOperation"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym416 := z.EncBinary()
				_ = yym416
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBLastOperation))
				}
			}
			if yyr380 || yy2arr380 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym417 := z.DecBinary()
	_ = yym417
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct418 := r.ContainerType()
		if yyct418 == codecSelferValueTypeMap1234 {
			yyl418 := r.ReadMapStart()
			if yyl418 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl418, d)
			}
		} else if yyct418 == codecSelferValueTypeArray1234 {
			yyl418 := r.ReadArrayStart()
			if yyl418 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl418, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys419Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys419Slc
	var yyhl419 bool = l >= 0
	for yyj419 := 0; ; yyj419++ {
		if yyhl419 {
			if yyj419 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys419Slc = r.DecodeBytes(yys419Slc, true, true)
		yys419 := string(yys419Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys419 {
		case "serviceClassName":
			if r.TryDecodeAsNil() {
				x.ServiceClassName = ""
			} else {
				x.ServiceClassName = string(r.DecodeString())
			}
		case "planName":
			if r.TryDecodeAsNil() {
				x.PlanName = ""
			} else {
				x.PlanName = string(r.DecodeString())
			}
		case "parameters":
			if r.TryDecodeAsNil() {
				x.Parameters = nil
			} else {
				yyv422 := &x.Parameters
				yym423 := z.DecBinary()
				_ = yym423
				if false {
				} else {
					h.decMapstringruntime_RawExtension((*map[string]pkg4_runtime.RawExtension)(yyv422), d)
				}
			}
		case "osbGuid":
			if r.TryDecodeAsNil() {
				x.OSBGUID = ""
			} else {
				x.OSBGUID = string(r.DecodeString())
			}
		case "osbCredentials":
			if r.TryDecodeAsNil() {
				x.OSBCredentials = ""
			} else {
				x.OSBCredentials = string(r.DecodeString())
			}
		case "osbDashboardURL":
			if r.TryDecodeAsNil() {
				x.OSBDashboardURL = ""
			} else {
				x.OSBDashboardURL = string(r.DecodeString())
			}
		case "osbInternalID":
			if r.TryDecodeAsNil() {
				x.OSBInternalID = ""
			} else {
				x.OSBInternalID = string(r.DecodeString())
			}
		case "osbServiceID":
			if r.TryDecodeAsNil() {
				x.OSBServiceID = ""
			} else {
				x.OSBServiceID = string(r.DecodeString())
			}
		case "osbPlanID":
			if r.TryDecodeAsNil() {
				x.OSBPlanID = ""
			} else {
				x.OSBPlanID = string(r.DecodeString())
			}
		case "osbType":
			if r.TryDecodeAsNil() {
				x.OSBType = ""
			} else {
				x.OSBType = string(r.DecodeString())
			}
		case "osbSpaceGUID":
			if r.TryDecodeAsNil() {
				x.OSBSpaceGUID = ""
			} else {
				x.OSBSpaceGUID = string(r.DecodeString())
			}
		case "osbLastOperation":
			if r.TryDecodeAsNil() {
				x.OSBLastOperation = ""
			} else {
				x.OSBLastOperation = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys419)
		} // end switch yys419
	} // end for yyj419
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj433 int
	var yyb433 bool
	var yyhl433 bool = l >= 0
	yyj433++
	if yyhl433 {
		yyb433 = yyj433 > l
	} else {
		yyb433 = r.CheckBreak()
	}
	if yyb433 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceClassName = ""
	} else {
		x.ServiceClassName = string(r.DecodeString())
	}
	yyj433++
	if yyhl433 {
		yyb433 = yyj433 > l
	} else {
		yyb433 = r.CheckBreak()
	}
	if yyb433 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PlanName = ""
	} else {
		x.PlanName = string(r.DecodeString())
	}
	yyj433++
	if yyhl433 {
		yyb433 = yyj433 > l
	} else {
		yyb433 = r.CheckBreak()
	}
	if yyb433 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Parameters = nil
	} else {
		yyv436 := &x.Parameters
		yym437 := z.DecBinary()
		_ = yym437
		if false {
		} else {
			h.decMapstringruntime_RawExtension((*map[string]pkg4_runtime.RawExtension)(yyv436), d)
		}
	}
	yyj433++
	if yyhl433 {
		yyb433 = yyj433 > l
	} else {
		yyb433 = r.CheckBreak()
	}
	if yyb433 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBGUID = ""
	} else {
		x.OSBGUID = string(r.DecodeString())
	}
	yyj433++
	if yyhl433 {
		yyb433 = yyj433 > l
	} else {
		yyb433 = r.CheckBreak()
	}
	if yyb433 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBCredentials = ""
	} else {
		x.OSBCredentials = string(r.DecodeString())
	}
	yyj433++
	if yyhl433 {
		yyb433 = yyj433 > l
	} else {
		yyb433 = r.CheckBreak()
	}
	if yyb433 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBDashboardURL = ""
	} else {
		x.OSBDashboardURL = string(r.DecodeString())
	}
	yyj433++
	if yyhl433 {
		yyb433 = yyj433 > l
	} else {
		yyb433 = r.CheckBreak()
	}
	if yyb433 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBInternalID = ""
	} else {
		x.OSBInternalID = string(r.DecodeString())
	}
	yyj433++
	if yyhl433 {
		yyb433 = yyj433 > l
	} else {
		yyb433 = r.CheckBreak()
	}
	if yyb433 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBServiceID = ""
	} else {
		x.OSBServiceID = string(r.DecodeString())
	}
	yyj433++
	if yyhl433 {
		yyb433 = yyj433 > l
	} else {
		yyb433 = r.CheckBreak()
	}
	if yyb433 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBPlanID = ""
	} else {
		x.OSBPlanID = string(r.DecodeString())
	}
	yyj433++
	if yyhl433 {
		yyb433 = yyj433 > l
	} else {
		yyb433 = r.CheckBreak()
	}
	if yyb433 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBType = ""
	} else {
		x.OSBType = string(r.DecodeString())
	}
	yyj433++
	if yyhl433 {
		yyb433 = yyj433 > l
	} else {
		yyb433 = r.CheckBreak()
	}
	if yyb433 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBSpaceGUID = ""
	} else {
		x.OSBSpaceGUID = string(r.DecodeString())
	}
	yyj433++
	if yyhl433 {
		yyb433 = yyj433 > l
	} else {
		yyb433 = r.CheckBreak()
	}
	if yyb433 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBLastOperation = ""
	} else {
		x.OSBLastOperation = string(r.DecodeString())
	}
	for {
		yyj433++
		if yyhl433 {
			yyb433 = yyj433 > l
		} else {
			yyb433 = r.CheckBreak()
		}
		if yyb433 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj433-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym447 := z.EncBinary()
		_ = yym447
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep448 := !z.EncBinary()
			yy2arr448 := z.EncBasicHandle().StructToArray
			var yyq448 [1]bool
			_, _, _ = yysep448, yyq448, yy2arr448
			const yyr448 bool = false
			var yynn448 int
			if yyr448 || yy2arr448 {
				r.EncodeArrayStart(1)
			} else {
				yynn448 = 1
				for _, b := range yyq448 {
					if b {
						yynn448++
					}
				}
				r.EncodeMapStart(yynn448)
				yynn448 = 0
			}
			if yyr448 || yy2arr448 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym450 := z.EncBinary()
					_ = yym450
					if false {
					} else {
						h.encSliceInstanceCondition(([]InstanceCondition)(x.Conditions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("conditions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym451 := z.EncBinary()
					_ = yym451
					if false {
					} else {
						h.encSliceInstanceCondition(([]InstanceCondition)(x.Conditions), e)
					}
				}
			}
			if yyr448 || yy2arr448 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym452 := z.DecBinary()
	_ = yym452
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct453 := r.ContainerType()
		if yyct453 == codecSelferValueTypeMap1234 {
			yyl453 := r.ReadMapStart()
			if yyl453 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl453, d)
			}
		} else if yyct453 == codecSelferValueTypeArray1234 {
			yyl453 := r.ReadArrayStart()
			if yyl453 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl453, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys454Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys454Slc
	var yyhl454 bool = l >= 0
	for yyj454 := 0; ; yyj454++ {
		if yyhl454 {
			if yyj454 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys454Slc = r.DecodeBytes(yys454Slc, true, true)
		yys454 := string(yys454Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys454 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv455 := &x.Conditions
				yym456 := z.DecBinary()
				_ = yym456
				if false {
				} else {
					h.decSliceInstanceCondition((*[]InstanceCondition)(yyv455), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys454)
		} // end switch yys454
	} // end for yyj454
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj457 int
	var yyb457 bool
	var yyhl457 bool = l >= 0
	yyj457++
	if yyhl457 {
		yyb457 = yyj457 > l
	} else {
		yyb457 = r.CheckBreak()
	}
	if yyb457 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv458 := &x.Conditions
		yym459 := z.DecBinary()
		_ = yym459
		if false {
		} else {
			h.decSliceInstanceCondition((*[]InstanceCondition)(yyv458), d)
		}
	}
	for {
		yyj457++
		if yyhl457 {
			yyb457 = yyj457 > l
		} else {
			yyb457 = r.CheckBreak()
		}
		if yyb457 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj457-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *InstanceCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym460 := z.EncBinary()
		_ = yym460
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep461 := !z.EncBinary()
			yy2arr461 := z.EncBasicHandle().StructToArray
			var yyq461 [4]bool
			_, _, _ = yysep461, yyq461, yy2arr461
			const yyr461 bool = false
			var yynn461 int
			if yyr461 || yy2arr461 {
				r.EncodeArrayStart(4)
			} else {
				yynn461 = 4
				for _, b := range yyq461 {
					if b {
						yynn461++
					}
				}
				r.EncodeMapStart(yynn461)
				yynn461 = 0
			}
			if yyr461 || yy2arr461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr461 || yy2arr461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr461 || yy2arr461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym465 := z.EncBinary()
				_ = yym465
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("reason"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym466 := z.EncBinary()
				_ = yym466
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			}
			if yyr461 || yy2arr461 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym468 := z.EncBinary()
				_ = yym468
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("message"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym469 := z.EncBinary()
				_ = yym469
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			}
			if yyr461 || yy2arr461 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *InstanceCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym470 := z.DecBinary()
	_ = yym470
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct471 := r.ContainerType()
		if yyct471 == codecSelferValueTypeMap1234 {
			yyl471 := r.ReadMapStart()
			if yyl471 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl471, d)
			}
		} else if yyct471 == codecSelferValueTypeArray1234 {
			yyl471 := r.ReadArrayStart()
			if yyl471 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl471, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *InstanceCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys472Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys472Slc
	var yyhl472 bool = l >= 0
	for yyj472 := 0; ; yyj472++ {
		if yyhl472 {
			if yyj472 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys472Slc = r.DecodeBytes(yys472Slc, true, true)
		yys472 := string(yys472Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys472 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = InstanceConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys472)
		} // end switch yys472
	} // end for yyj472
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *InstanceCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj477 int
	var yyb477 bool
	var yyhl477 bool = l >= 0
	yyj477++
	if yyhl477 {
		yyb477 = yyj477 > l
	} else {
		yyb477 = r.CheckBreak()
	}
	if yyb477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = InstanceConditionType(r.DecodeString())
	}
	yyj477++
	if yyhl477 {
		yyb477 = yyj477 > l
	} else {
		yyb477 = r.CheckBreak()
	}
	if yyb477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj477++
	if yyhl477 {
		yyb477 = yyj477 > l
	} else {
		yyb477 = r.CheckBreak()
	}
	if yyb477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj477++
	if yyhl477 {
		yyb477 = yyj477 > l
	} else {
		yyb477 = r.CheckBreak()
	}
	if yyb477 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj477++
		if yyhl477 {
			yyb477 = yyj477 > l
		} else {
			yyb477 = r.CheckBreak()
		}
		if yyb477 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj477-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x InstanceConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym482 := z.EncBinary()
	_ = yym482
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *InstanceConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym483 := z.DecBinary()
	_ = yym483
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *BindingList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym484 := z.EncBinary()
		_ = yym484
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep485 := !z.EncBinary()
			yy2arr485 := z.EncBasicHandle().StructToArray
			var yyq485 [4]bool
			_, _, _ = yysep485, yyq485, yy2arr485
			const yyr485 bool = false
			yyq485[0] = x.Kind != ""
			yyq485[1] = x.APIVersion != ""
			yyq485[2] = true
			var yynn485 int
			if yyr485 || yy2arr485 {
				r.EncodeArrayStart(4)
			} else {
				yynn485 = 1
				for _, b := range yyq485 {
					if b {
						yynn485++
					}
				}
				r.EncodeMapStart(yynn485)
				yynn485 = 0
			}
			if yyr485 || yy2arr485 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq485[0] {
					yym487 := z.EncBinary()
					_ = yym487
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq485[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym488 := z.EncBinary()
					_ = yym488
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr485 || yy2arr485 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq485[1] {
					yym490 := z.EncBinary()
					_ = yym490
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq485[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym491 := z.EncBinary()
					_ = yym491
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr485 || yy2arr485 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq485[2] {
					yy493 := &x.ListMeta
					yym494 := z.EncBinary()
					_ = yym494
					if false {
					} else if z.HasExtensions() && z.EncExt(yy493) {
					} else {
						z.EncFallback(yy493)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq485[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy495 := &x.ListMeta
					yym496 := z.EncBinary()
					_ = yym496
					if false {
					} else if z.HasExtensions() && z.EncExt(yy495) {
					} else {
						z.EncFallback(yy495)
					}
				}
			}
			if yyr485 || yy2arr485 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym498 := z.EncBinary()
					_ = yym498
					if false {
					} else {
						h.encSliceBinding(([]Binding)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym499 := z.EncBinary()
					_ = yym499
					if false {
					} else {
						h.encSliceBinding(([]Binding)(x.Items), e)
					}
				}
			}
			if yyr485 || yy2arr485 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BindingList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym500 := z.DecBinary()
	_ = yym500
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct501 := r.ContainerType()
		if yyct501 == codecSelferValueTypeMap1234 {
			yyl501 := r.ReadMapStart()
			if yyl501 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl501, d)
			}
		} else if yyct501 == codecSelferValueTypeArray1234 {
			yyl501 := r.ReadArrayStart()
			if yyl501 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl501, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BindingList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys502Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys502Slc
	var yyhl502 bool = l >= 0
	for yyj502 := 0; ; yyj502++ {
		if yyhl502 {
			if yyj502 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys502Slc = r.DecodeBytes(yys502Slc, true, true)
		yys502 := string(yys502Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys502 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv505 := &x.ListMeta
				yym506 := z.DecBinary()
				_ = yym506
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv505) {
				} else {
					z.DecFallback(yyv505, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv507 := &x.Items
				yym508 := z.DecBinary()
				_ = yym508
				if false {
				} else {
					h.decSliceBinding((*[]Binding)(yyv507), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys502)
		} // end switch yys502
	} // end for yyj502
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BindingList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj509 int
	var yyb509 bool
	var yyhl509 bool = l >= 0
	yyj509++
	if yyhl509 {
		yyb509 = yyj509 > l
	} else {
		yyb509 = r.CheckBreak()
	}
	if yyb509 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj509++
	if yyhl509 {
		yyb509 = yyj509 > l
	} else {
		yyb509 = r.CheckBreak()
	}
	if yyb509 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj509++
	if yyhl509 {
		yyb509 = yyj509 > l
	} else {
		yyb509 = r.CheckBreak()
	}
	if yyb509 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv512 := &x.ListMeta
		yym513 := z.DecBinary()
		_ = yym513
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv512) {
		} else {
			z.DecFallback(yyv512, false)
		}
	}
	yyj509++
	if yyhl509 {
		yyb509 = yyj509 > l
	} else {
		yyb509 = r.CheckBreak()
	}
	if yyb509 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv514 := &x.Items
		yym515 := z.DecBinary()
		_ = yym515
		if false {
		} else {
			h.decSliceBinding((*[]Binding)(yyv514), d)
		}
	}
	for {
		yyj509++
		if yyhl509 {
			yyb509 = yyj509 > l
		} else {
			yyb509 = r.CheckBreak()
		}
		if yyb509 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj509-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym516 := z.EncBinary()
		_ = yym516
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep517 := !z.EncBinary()
			yy2arr517 := z.EncBasicHandle().StructToArray
			var yyq517 [5]bool
			_, _, _ = yysep517, yyq517, yy2arr517
			const yyr517 bool = false
			yyq517[0] = x.Kind != ""
			yyq517[1] = x.APIVersion != ""
			yyq517[2] = true
			var yynn517 int
			if yyr517 || yy2arr517 {
				r.EncodeArrayStart(5)
			} else {
				yynn517 = 2
				for _, b := range yyq517 {
					if b {
						yynn517++
					}
				}
				r.EncodeMapStart(yynn517)
				yynn517 = 0
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq517[0] {
					yym519 := z.EncBinary()
					_ = yym519
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq517[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym520 := z.EncBinary()
					_ = yym520
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq517[1] {
					yym522 := z.EncBinary()
					_ = yym522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq517[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym523 := z.EncBinary()
					_ = yym523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq517[2] {
					yy525 := &x.ObjectMeta
					yy525.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq517[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy526 := &x.ObjectMeta
					yy526.CodecEncodeSelf(e)
				}
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy528 := &x.Spec
				yy528.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("spec"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy529 := &x.Spec
				yy529.CodecEncodeSelf(e)
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy531 := &x.Status
				yy531.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy532 := &x.Status
				yy532.CodecEncodeSelf(e)
			}
			if yyr517 || yy2arr517 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym533 := z.DecBinary()
	_ = yym533
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct534 := r.ContainerType()
		if yyct534 == codecSelferValueTypeMap1234 {
			yyl534 := r.ReadMapStart()
			if yyl534 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl534, d)
			}
		} else if yyct534 == codecSelferValueTypeArray1234 {
			yyl534 := r.ReadArrayStart()
			if yyl534 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl534, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys535Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys535Slc
	var yyhl535 bool = l >= 0
	for yyj535 := 0; ; yyj535++ {
		if yyhl535 {
			if yyj535 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys535Slc = r.DecodeBytes(yys535Slc, true, true)
		yys535 := string(yys535Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys535 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv538 := &x.ObjectMeta
				yyv538.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = BindingSpec{}
			} else {
				yyv539 := &x.Spec
				yyv539.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = BindingStatus{}
			} else {
				yyv540 := &x.Status
				yyv540.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys535)
		} // end switch yys535
	} // end for yyj535
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj541 int
	var yyb541 bool
	var yyhl541 bool = l >= 0
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv544 := &x.ObjectMeta
		yyv544.CodecDecodeSelf(d)
	}
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = BindingSpec{}
	} else {
		yyv545 := &x.Spec
		yyv545.CodecDecodeSelf(d)
	}
	yyj541++
	if yyhl541 {
		yyb541 = yyj541 > l
	} else {
		yyb541 = r.CheckBreak()
	}
	if yyb541 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = BindingStatus{}
	} else {
		yyv546 := &x.Status
		yyv546.CodecDecodeSelf(d)
	}
	for {
		yyj541++
		if yyhl541 {
			yyb541 = yyj541 > l
		} else {
			yyb541 = r.CheckBreak()
		}
		if yyb541 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj541-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BindingSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym547 := z.EncBinary()
		_ = yym547
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep548 := !z.EncBinary()
			yy2arr548 := z.EncBasicHandle().StructToArray
			var yyq548 [7]bool
			_, _, _ = yysep548, yyq548, yy2arr548
			const yyr548 bool = false
			var yynn548 int
			if yyr548 || yy2arr548 {
				r.EncodeArrayStart(7)
			} else {
				yynn548 = 7
				for _, b := range yyq548 {
					if b {
						yynn548++
					}
				}
				r.EncodeMapStart(yynn548)
				yynn548 = 0
			}
			if yyr548 || yy2arr548 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy550 := &x.InstanceRef
				yy550.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("instanceRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy551 := &x.InstanceRef
				yy551.CodecEncodeSelf(e)
			}
			if yyr548 || yy2arr548 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy553 := &x.AppLabelSelector
				yym554 := z.EncBinary()
				_ = yym554
				if false {
				} else if z.HasExtensions() && z.EncExt(yy553) {
				} else {
					z.EncFallback(yy553)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("appLabelSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy555 := &x.AppLabelSelector
				yym556 := z.EncBinary()
				_ = yym556
				if false {
				} else if z.HasExtensions() && z.EncExt(yy555) {
				} else {
					z.EncFallback(yy555)
				}
			}
			if yyr548 || yy2arr548 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Parameters == nil {
					r.EncodeNil()
				} else {
					yym558 := z.EncBinary()
					_ = yym558
					if false {
					} else {
						h.encMapstringruntime_RawExtension((map[string]pkg4_runtime.RawExtension)(x.Parameters), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("parameters"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Parameters == nil {
					r.EncodeNil()
				} else {
					yym559 := z.EncBinary()
					_ = yym559
					if false {
					} else {
						h.encMapstringruntime_RawExtension((map[string]pkg4_runtime.RawExtension)(x.Parameters), e)
					}
				}
			}
			if yyr548 || yy2arr548 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym561 := z.EncBinary()
				_ = yym561
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym562 := z.EncBinary()
				_ = yym562
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr548 || yy2arr548 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym564 := z.EncBinary()
				_ = yym564
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym565 := z.EncBinary()
				_ = yym565
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr548 || yy2arr548 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym567 := z.EncBinary()
				_ = yym567
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ConfigMapName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("configMapName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym568 := z.EncBinary()
				_ = yym568
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ConfigMapName))
				}
			}
			if yyr548 || yy2arr548 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym570 := z.EncBinary()
				_ = yym570
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osbGuid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym571 := z.EncBinary()
				_ = yym571
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSBGUID))
				}
			}
			if yyr548 || yy2arr548 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BindingSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym572 := z.DecBinary()
	_ = yym572
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct573 := r.ContainerType()
		if yyct573 == codecSelferValueTypeMap1234 {
			yyl573 := r.ReadMapStart()
			if yyl573 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl573, d)
			}
		} else if yyct573 == codecSelferValueTypeArray1234 {
			yyl573 := r.ReadArrayStart()
			if yyl573 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl573, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BindingSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys574Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys574Slc
	var yyhl574 bool = l >= 0
	for yyj574 := 0; ; yyj574++ {
		if yyhl574 {
			if yyj574 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys574Slc = r.DecodeBytes(yys574Slc, true, true)
		yys574 := string(yys574Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys574 {
		case "instanceRef":
			if r.TryDecodeAsNil() {
				x.InstanceRef = pkg2_v1.ObjectReference{}
			} else {
				yyv575 := &x.InstanceRef
				yyv575.CodecDecodeSelf(d)
			}
		case "appLabelSelector":
			if r.TryDecodeAsNil() {
				x.AppLabelSelector = pkg1_v1.LabelSelector{}
			} else {
				yyv576 := &x.AppLabelSelector
				yym577 := z.DecBinary()
				_ = yym577
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv576) {
				} else {
					z.DecFallback(yyv576, false)
				}
			}
		case "parameters":
			if r.TryDecodeAsNil() {
				x.Parameters = nil
			} else {
				yyv578 := &x.Parameters
				yym579 := z.DecBinary()
				_ = yym579
				if false {
				} else {
					h.decMapstringruntime_RawExtension((*map[string]pkg4_runtime.RawExtension)(yyv578), d)
				}
			}
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "configMapName":
			if r.TryDecodeAsNil() {
				x.ConfigMapName = ""
			} else {
				x.ConfigMapName = string(r.DecodeString())
			}
		case "osbGuid":
			if r.TryDecodeAsNil() {
				x.OSBGUID = ""
			} else {
				x.OSBGUID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys574)
		} // end switch yys574
	} // end for yyj574
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BindingSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj584 int
	var yyb584 bool
	var yyhl584 bool = l >= 0
	yyj584++
	if yyhl584 {
		yyb584 = yyj584 > l
	} else {
		yyb584 = r.CheckBreak()
	}
	if yyb584 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InstanceRef = pkg2_v1.ObjectReference{}
	} else {
		yyv585 := &x.InstanceRef
		yyv585.CodecDecodeSelf(d)
	}
	yyj584++
	if yyhl584 {
		yyb584 = yyj584 > l
	} else {
		yyb584 = r.CheckBreak()
	}
	if yyb584 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AppLabelSelector = pkg1_v1.LabelSelector{}
	} else {
		yyv586 := &x.AppLabelSelector
		yym587 := z.DecBinary()
		_ = yym587
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv586) {
		} else {
			z.DecFallback(yyv586, false)
		}
	}
	yyj584++
	if yyhl584 {
		yyb584 = yyj584 > l
	} else {
		yyb584 = r.CheckBreak()
	}
	if yyb584 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Parameters = nil
	} else {
		yyv588 := &x.Parameters
		yym589 := z.DecBinary()
		_ = yym589
		if false {
		} else {
			h.decMapstringruntime_RawExtension((*map[string]pkg4_runtime.RawExtension)(yyv588), d)
		}
	}
	yyj584++
	if yyhl584 {
		yyb584 = yyj584 > l
	} else {
		yyb584 = r.CheckBreak()
	}
	if yyb584 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj584++
	if yyhl584 {
		yyb584 = yyj584 > l
	} else {
		yyb584 = r.CheckBreak()
	}
	if yyb584 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj584++
	if yyhl584 {
		yyb584 = yyj584 > l
	} else {
		yyb584 = r.CheckBreak()
	}
	if yyb584 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ConfigMapName = ""
	} else {
		x.ConfigMapName = string(r.DecodeString())
	}
	yyj584++
	if yyhl584 {
		yyb584 = yyj584 > l
	} else {
		yyb584 = r.CheckBreak()
	}
	if yyb584 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSBGUID = ""
	} else {
		x.OSBGUID = string(r.DecodeString())
	}
	for {
		yyj584++
		if yyhl584 {
			yyb584 = yyj584 > l
		} else {
			yyb584 = r.CheckBreak()
		}
		if yyb584 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj584-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BindingStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym594 := z.EncBinary()
		_ = yym594
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep595 := !z.EncBinary()
			yy2arr595 := z.EncBasicHandle().StructToArray
			var yyq595 [1]bool
			_, _, _ = yysep595, yyq595, yy2arr595
			const yyr595 bool = false
			var yynn595 int
			if yyr595 || yy2arr595 {
				r.EncodeArrayStart(1)
			} else {
				yynn595 = 1
				for _, b := range yyq595 {
					if b {
						yynn595++
					}
				}
				r.EncodeMapStart(yynn595)
				yynn595 = 0
			}
			if yyr595 || yy2arr595 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym597 := z.EncBinary()
					_ = yym597
					if false {
					} else {
						h.encSliceBindingCondition(([]BindingCondition)(x.Conditions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("conditions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Conditions == nil {
					r.EncodeNil()
				} else {
					yym598 := z.EncBinary()
					_ = yym598
					if false {
					} else {
						h.encSliceBindingCondition(([]BindingCondition)(x.Conditions), e)
					}
				}
			}
			if yyr595 || yy2arr595 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BindingStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym599 := z.DecBinary()
	_ = yym599
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct600 := r.ContainerType()
		if yyct600 == codecSelferValueTypeMap1234 {
			yyl600 := r.ReadMapStart()
			if yyl600 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl600, d)
			}
		} else if yyct600 == codecSelferValueTypeArray1234 {
			yyl600 := r.ReadArrayStart()
			if yyl600 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl600, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BindingStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys601Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys601Slc
	var yyhl601 bool = l >= 0
	for yyj601 := 0; ; yyj601++ {
		if yyhl601 {
			if yyj601 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys601Slc = r.DecodeBytes(yys601Slc, true, true)
		yys601 := string(yys601Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys601 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv602 := &x.Conditions
				yym603 := z.DecBinary()
				_ = yym603
				if false {
				} else {
					h.decSliceBindingCondition((*[]BindingCondition)(yyv602), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys601)
		} // end switch yys601
	} // end for yyj601
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BindingStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj604 int
	var yyb604 bool
	var yyhl604 bool = l >= 0
	yyj604++
	if yyhl604 {
		yyb604 = yyj604 > l
	} else {
		yyb604 = r.CheckBreak()
	}
	if yyb604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv605 := &x.Conditions
		yym606 := z.DecBinary()
		_ = yym606
		if false {
		} else {
			h.decSliceBindingCondition((*[]BindingCondition)(yyv605), d)
		}
	}
	for {
		yyj604++
		if yyhl604 {
			yyb604 = yyj604 > l
		} else {
			yyb604 = r.CheckBreak()
		}
		if yyb604 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj604-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *BindingCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym607 := z.EncBinary()
		_ = yym607
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep608 := !z.EncBinary()
			yy2arr608 := z.EncBasicHandle().StructToArray
			var yyq608 [4]bool
			_, _, _ = yysep608, yyq608, yy2arr608
			const yyr608 bool = false
			var yynn608 int
			if yyr608 || yy2arr608 {
				r.EncodeArrayStart(4)
			} else {
				yynn608 = 4
				for _, b := range yyq608 {
					if b {
						yynn608++
					}
				}
				r.EncodeMapStart(yynn608)
				yynn608 = 0
			}
			if yyr608 || yy2arr608 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr608 || yy2arr608 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr608 || yy2arr608 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym612 := z.EncBinary()
				_ = yym612
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("reason"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym613 := z.EncBinary()
				_ = yym613
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
				}
			}
			if yyr608 || yy2arr608 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym615 := z.EncBinary()
				_ = yym615
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("message"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym616 := z.EncBinary()
				_ = yym616
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Message))
				}
			}
			if yyr608 || yy2arr608 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *BindingCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym617 := z.DecBinary()
	_ = yym617
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct618 := r.ContainerType()
		if yyct618 == codecSelferValueTypeMap1234 {
			yyl618 := r.ReadMapStart()
			if yyl618 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl618, d)
			}
		} else if yyct618 == codecSelferValueTypeArray1234 {
			yyl618 := r.ReadArrayStart()
			if yyl618 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl618, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *BindingCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys619Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys619Slc
	var yyhl619 bool = l >= 0
	for yyj619 := 0; ; yyj619++ {
		if yyhl619 {
			if yyj619 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys619Slc = r.DecodeBytes(yys619Slc, true, true)
		yys619 := string(yys619Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys619 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = BindingConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys619)
		} // end switch yys619
	} // end for yyj619
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *BindingCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj624 int
	var yyb624 bool
	var yyhl624 bool = l >= 0
	yyj624++
	if yyhl624 {
		yyb624 = yyj624 > l
	} else {
		yyb624 = r.CheckBreak()
	}
	if yyb624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = BindingConditionType(r.DecodeString())
	}
	yyj624++
	if yyhl624 {
		yyb624 = yyj624 > l
	} else {
		yyb624 = r.CheckBreak()
	}
	if yyb624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj624++
	if yyhl624 {
		yyb624 = yyj624 > l
	} else {
		yyb624 = r.CheckBreak()
	}
	if yyb624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj624++
	if yyhl624 {
		yyb624 = yyj624 > l
	} else {
		yyb624 = r.CheckBreak()
	}
	if yyb624 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj624++
		if yyhl624 {
			yyb624 = yyj624 > l
		} else {
			yyb624 = r.CheckBreak()
		}
		if yyb624 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj624-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x BindingConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym629 := z.EncBinary()
	_ = yym629
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *BindingConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym630 := z.DecBinary()
	_ = yym630
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x codecSelfer1234) encSliceBroker(v []Broker, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv631 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy632 := &yyv631
		yy632.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceBroker(v *[]Broker, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv633 := *v
	yyh633, yyl633 := z.DecSliceHelperStart()
	var yyc633 bool
	if yyl633 == 0 {
		if yyv633 == nil {
			yyv633 = []Broker{}
			yyc633 = true
		} else if len(yyv633) != 0 {
			yyv633 = yyv633[:0]
			yyc633 = true
		}
	} else if yyl633 > 0 {
		var yyrr633, yyrl633 int
		var yyrt633 bool
		if yyl633 > cap(yyv633) {

			yyrg633 := len(yyv633) > 0
			yyv2633 := yyv633
			yyrl633, yyrt633 = z.DecInferLen(yyl633, z.DecBasicHandle().MaxInitLen, 344)
			if yyrt633 {
				if yyrl633 <= cap(yyv633) {
					yyv633 = yyv633[:yyrl633]
				} else {
					yyv633 = make([]Broker, yyrl633)
				}
			} else {
				yyv633 = make([]Broker, yyrl633)
			}
			yyc633 = true
			yyrr633 = len(yyv633)
			if yyrg633 {
				copy(yyv633, yyv2633)
			}
		} else if yyl633 != len(yyv633) {
			yyv633 = yyv633[:yyl633]
			yyc633 = true
		}
		yyj633 := 0
		for ; yyj633 < yyrr633; yyj633++ {
			yyh633.ElemContainerState(yyj633)
			if r.TryDecodeAsNil() {
				yyv633[yyj633] = Broker{}
			} else {
				yyv634 := &yyv633[yyj633]
				yyv634.CodecDecodeSelf(d)
			}

		}
		if yyrt633 {
			for ; yyj633 < yyl633; yyj633++ {
				yyv633 = append(yyv633, Broker{})
				yyh633.ElemContainerState(yyj633)
				if r.TryDecodeAsNil() {
					yyv633[yyj633] = Broker{}
				} else {
					yyv635 := &yyv633[yyj633]
					yyv635.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj633 := 0
		for ; !r.CheckBreak(); yyj633++ {

			if yyj633 >= len(yyv633) {
				yyv633 = append(yyv633, Broker{}) // var yyz633 Broker
				yyc633 = true
			}
			yyh633.ElemContainerState(yyj633)
			if yyj633 < len(yyv633) {
				if r.TryDecodeAsNil() {
					yyv633[yyj633] = Broker{}
				} else {
					yyv636 := &yyv633[yyj633]
					yyv636.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj633 < len(yyv633) {
			yyv633 = yyv633[:yyj633]
			yyc633 = true
		} else if yyj633 == 0 && yyv633 == nil {
			yyv633 = []Broker{}
			yyc633 = true
		}
	}
	yyh633.End()
	if yyc633 {
		*v = yyv633
	}
}

func (x codecSelfer1234) encSliceBrokerCondition(v []BrokerCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv637 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy638 := &yyv637
		yy638.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceBrokerCondition(v *[]BrokerCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv639 := *v
	yyh639, yyl639 := z.DecSliceHelperStart()
	var yyc639 bool
	if yyl639 == 0 {
		if yyv639 == nil {
			yyv639 = []BrokerCondition{}
			yyc639 = true
		} else if len(yyv639) != 0 {
			yyv639 = yyv639[:0]
			yyc639 = true
		}
	} else if yyl639 > 0 {
		var yyrr639, yyrl639 int
		var yyrt639 bool
		if yyl639 > cap(yyv639) {

			yyrg639 := len(yyv639) > 0
			yyv2639 := yyv639
			yyrl639, yyrt639 = z.DecInferLen(yyl639, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt639 {
				if yyrl639 <= cap(yyv639) {
					yyv639 = yyv639[:yyrl639]
				} else {
					yyv639 = make([]BrokerCondition, yyrl639)
				}
			} else {
				yyv639 = make([]BrokerCondition, yyrl639)
			}
			yyc639 = true
			yyrr639 = len(yyv639)
			if yyrg639 {
				copy(yyv639, yyv2639)
			}
		} else if yyl639 != len(yyv639) {
			yyv639 = yyv639[:yyl639]
			yyc639 = true
		}
		yyj639 := 0
		for ; yyj639 < yyrr639; yyj639++ {
			yyh639.ElemContainerState(yyj639)
			if r.TryDecodeAsNil() {
				yyv639[yyj639] = BrokerCondition{}
			} else {
				yyv640 := &yyv639[yyj639]
				yyv640.CodecDecodeSelf(d)
			}

		}
		if yyrt639 {
			for ; yyj639 < yyl639; yyj639++ {
				yyv639 = append(yyv639, BrokerCondition{})
				yyh639.ElemContainerState(yyj639)
				if r.TryDecodeAsNil() {
					yyv639[yyj639] = BrokerCondition{}
				} else {
					yyv641 := &yyv639[yyj639]
					yyv641.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj639 := 0
		for ; !r.CheckBreak(); yyj639++ {

			if yyj639 >= len(yyv639) {
				yyv639 = append(yyv639, BrokerCondition{}) // var yyz639 BrokerCondition
				yyc639 = true
			}
			yyh639.ElemContainerState(yyj639)
			if yyj639 < len(yyv639) {
				if r.TryDecodeAsNil() {
					yyv639[yyj639] = BrokerCondition{}
				} else {
					yyv642 := &yyv639[yyj639]
					yyv642.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj639 < len(yyv639) {
			yyv639 = yyv639[:yyj639]
			yyc639 = true
		} else if yyj639 == 0 && yyv639 == nil {
			yyv639 = []BrokerCondition{}
			yyc639 = true
		}
	}
	yyh639.End()
	if yyc639 {
		*v = yyv639
	}
}

func (x codecSelfer1234) encSliceServiceClass(v []ServiceClass, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv643 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy644 := &yyv643
		yy644.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceClass(v *[]ServiceClass, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv645 := *v
	yyh645, yyl645 := z.DecSliceHelperStart()
	var yyc645 bool
	if yyl645 == 0 {
		if yyv645 == nil {
			yyv645 = []ServiceClass{}
			yyc645 = true
		} else if len(yyv645) != 0 {
			yyv645 = yyv645[:0]
			yyc645 = true
		}
	} else if yyl645 > 0 {
		var yyrr645, yyrl645 int
		var yyrt645 bool
		if yyl645 > cap(yyv645) {

			yyrg645 := len(yyv645) > 0
			yyv2645 := yyv645
			yyrl645, yyrt645 = z.DecInferLen(yyl645, z.DecBasicHandle().MaxInitLen, 552)
			if yyrt645 {
				if yyrl645 <= cap(yyv645) {
					yyv645 = yyv645[:yyrl645]
				} else {
					yyv645 = make([]ServiceClass, yyrl645)
				}
			} else {
				yyv645 = make([]ServiceClass, yyrl645)
			}
			yyc645 = true
			yyrr645 = len(yyv645)
			if yyrg645 {
				copy(yyv645, yyv2645)
			}
		} else if yyl645 != len(yyv645) {
			yyv645 = yyv645[:yyl645]
			yyc645 = true
		}
		yyj645 := 0
		for ; yyj645 < yyrr645; yyj645++ {
			yyh645.ElemContainerState(yyj645)
			if r.TryDecodeAsNil() {
				yyv645[yyj645] = ServiceClass{}
			} else {
				yyv646 := &yyv645[yyj645]
				yyv646.CodecDecodeSelf(d)
			}

		}
		if yyrt645 {
			for ; yyj645 < yyl645; yyj645++ {
				yyv645 = append(yyv645, ServiceClass{})
				yyh645.ElemContainerState(yyj645)
				if r.TryDecodeAsNil() {
					yyv645[yyj645] = ServiceClass{}
				} else {
					yyv647 := &yyv645[yyj645]
					yyv647.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj645 := 0
		for ; !r.CheckBreak(); yyj645++ {

			if yyj645 >= len(yyv645) {
				yyv645 = append(yyv645, ServiceClass{}) // var yyz645 ServiceClass
				yyc645 = true
			}
			yyh645.ElemContainerState(yyj645)
			if yyj645 < len(yyv645) {
				if r.TryDecodeAsNil() {
					yyv645[yyj645] = ServiceClass{}
				} else {
					yyv648 := &yyv645[yyj645]
					yyv648.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj645 < len(yyv645) {
			yyv645 = yyv645[:yyj645]
			yyc645 = true
		} else if yyj645 == 0 && yyv645 == nil {
			yyv645 = []ServiceClass{}
			yyc645 = true
		}
	}
	yyh645.End()
	if yyc645 {
		*v = yyv645
	}
}

func (x codecSelfer1234) encSliceServicePlan(v []ServicePlan, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv649 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy650 := &yyv649
		yy650.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePlan(v *[]ServicePlan, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv651 := *v
	yyh651, yyl651 := z.DecSliceHelperStart()
	var yyc651 bool
	if yyl651 == 0 {
		if yyv651 == nil {
			yyv651 = []ServicePlan{}
			yyc651 = true
		} else if len(yyv651) != 0 {
			yyv651 = yyv651[:0]
			yyc651 = true
		}
	} else if yyl651 > 0 {
		var yyrr651, yyrl651 int
		var yyrt651 bool
		if yyl651 > cap(yyv651) {

			yyrg651 := len(yyv651) > 0
			yyv2651 := yyv651
			yyrl651, yyrt651 = z.DecInferLen(yyl651, z.DecBasicHandle().MaxInitLen, 96)
			if yyrt651 {
				if yyrl651 <= cap(yyv651) {
					yyv651 = yyv651[:yyrl651]
				} else {
					yyv651 = make([]ServicePlan, yyrl651)
				}
			} else {
				yyv651 = make([]ServicePlan, yyrl651)
			}
			yyc651 = true
			yyrr651 = len(yyv651)
			if yyrg651 {
				copy(yyv651, yyv2651)
			}
		} else if yyl651 != len(yyv651) {
			yyv651 = yyv651[:yyl651]
			yyc651 = true
		}
		yyj651 := 0
		for ; yyj651 < yyrr651; yyj651++ {
			yyh651.ElemContainerState(yyj651)
			if r.TryDecodeAsNil() {
				yyv651[yyj651] = ServicePlan{}
			} else {
				yyv652 := &yyv651[yyj651]
				yyv652.CodecDecodeSelf(d)
			}

		}
		if yyrt651 {
			for ; yyj651 < yyl651; yyj651++ {
				yyv651 = append(yyv651, ServicePlan{})
				yyh651.ElemContainerState(yyj651)
				if r.TryDecodeAsNil() {
					yyv651[yyj651] = ServicePlan{}
				} else {
					yyv653 := &yyv651[yyj651]
					yyv653.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj651 := 0
		for ; !r.CheckBreak(); yyj651++ {

			if yyj651 >= len(yyv651) {
				yyv651 = append(yyv651, ServicePlan{}) // var yyz651 ServicePlan
				yyc651 = true
			}
			yyh651.ElemContainerState(yyj651)
			if yyj651 < len(yyv651) {
				if r.TryDecodeAsNil() {
					yyv651[yyj651] = ServicePlan{}
				} else {
					yyv654 := &yyv651[yyj651]
					yyv654.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj651 < len(yyv651) {
			yyv651 = yyv651[:yyj651]
			yyc651 = true
		} else if yyj651 == 0 && yyv651 == nil {
			yyv651 = []ServicePlan{}
			yyc651 = true
		}
	}
	yyh651.End()
	if yyc651 {
		*v = yyv651
	}
}

func (x codecSelfer1234) encSliceInstance(v []Instance, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv655 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy656 := &yyv655
		yy656.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceInstance(v *[]Instance, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv657 := *v
	yyh657, yyl657 := z.DecSliceHelperStart()
	var yyc657 bool
	if yyl657 == 0 {
		if yyv657 == nil {
			yyv657 = []Instance{}
			yyc657 = true
		} else if len(yyv657) != 0 {
			yyv657 = yyv657[:0]
			yyc657 = true
		}
	} else if yyl657 > 0 {
		var yyrr657, yyrl657 int
		var yyrt657 bool
		if yyl657 > cap(yyv657) {

			yyrg657 := len(yyv657) > 0
			yyv2657 := yyv657
			yyrl657, yyrt657 = z.DecInferLen(yyl657, z.DecBasicHandle().MaxInitLen, 464)
			if yyrt657 {
				if yyrl657 <= cap(yyv657) {
					yyv657 = yyv657[:yyrl657]
				} else {
					yyv657 = make([]Instance, yyrl657)
				}
			} else {
				yyv657 = make([]Instance, yyrl657)
			}
			yyc657 = true
			yyrr657 = len(yyv657)
			if yyrg657 {
				copy(yyv657, yyv2657)
			}
		} else if yyl657 != len(yyv657) {
			yyv657 = yyv657[:yyl657]
			yyc657 = true
		}
		yyj657 := 0
		for ; yyj657 < yyrr657; yyj657++ {
			yyh657.ElemContainerState(yyj657)
			if r.TryDecodeAsNil() {
				yyv657[yyj657] = Instance{}
			} else {
				yyv658 := &yyv657[yyj657]
				yyv658.CodecDecodeSelf(d)
			}

		}
		if yyrt657 {
			for ; yyj657 < yyl657; yyj657++ {
				yyv657 = append(yyv657, Instance{})
				yyh657.ElemContainerState(yyj657)
				if r.TryDecodeAsNil() {
					yyv657[yyj657] = Instance{}
				} else {
					yyv659 := &yyv657[yyj657]
					yyv659.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj657 := 0
		for ; !r.CheckBreak(); yyj657++ {

			if yyj657 >= len(yyv657) {
				yyv657 = append(yyv657, Instance{}) // var yyz657 Instance
				yyc657 = true
			}
			yyh657.ElemContainerState(yyj657)
			if yyj657 < len(yyv657) {
				if r.TryDecodeAsNil() {
					yyv657[yyj657] = Instance{}
				} else {
					yyv660 := &yyv657[yyj657]
					yyv660.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj657 < len(yyv657) {
			yyv657 = yyv657[:yyj657]
			yyc657 = true
		} else if yyj657 == 0 && yyv657 == nil {
			yyv657 = []Instance{}
			yyc657 = true
		}
	}
	yyh657.End()
	if yyc657 {
		*v = yyv657
	}
}

func (x codecSelfer1234) encMapstringruntime_RawExtension(v map[string]pkg4_runtime.RawExtension, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk661, yyv661 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym662 := z.EncBinary()
		_ = yym662
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk661))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy663 := &yyv661
		yym664 := z.EncBinary()
		_ = yym664
		if false {
		} else if z.HasExtensions() && z.EncExt(yy663) {
		} else if !yym664 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy663)
		} else {
			z.EncFallback(yy663)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringruntime_RawExtension(v *map[string]pkg4_runtime.RawExtension, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv665 := *v
	yyl665 := r.ReadMapStart()
	yybh665 := z.DecBasicHandle()
	if yyv665 == nil {
		yyrl665, _ := z.DecInferLen(yyl665, yybh665.MaxInitLen, 56)
		yyv665 = make(map[string]pkg4_runtime.RawExtension, yyrl665)
		*v = yyv665
	}
	var yymk665 string
	var yymv665 pkg4_runtime.RawExtension
	var yymg665 bool
	if yybh665.MapValueReset {
		yymg665 = true
	}
	if yyl665 > 0 {
		for yyj665 := 0; yyj665 < yyl665; yyj665++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk665 = ""
			} else {
				yymk665 = string(r.DecodeString())
			}

			if yymg665 {
				yymv665 = yyv665[yymk665]
			} else {
				yymv665 = pkg4_runtime.RawExtension{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv665 = pkg4_runtime.RawExtension{}
			} else {
				yyv667 := &yymv665
				yym668 := z.DecBinary()
				_ = yym668
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv667) {
				} else if !yym668 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv667)
				} else {
					z.DecFallback(yyv667, false)
				}
			}

			if yyv665 != nil {
				yyv665[yymk665] = yymv665
			}
		}
	} else if yyl665 < 0 {
		for yyj665 := 0; !r.CheckBreak(); yyj665++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk665 = ""
			} else {
				yymk665 = string(r.DecodeString())
			}

			if yymg665 {
				yymv665 = yyv665[yymk665]
			} else {
				yymv665 = pkg4_runtime.RawExtension{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv665 = pkg4_runtime.RawExtension{}
			} else {
				yyv670 := &yymv665
				yym671 := z.DecBinary()
				_ = yym671
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv670) {
				} else if !yym671 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv670)
				} else {
					z.DecFallback(yyv670, false)
				}
			}

			if yyv665 != nil {
				yyv665[yymk665] = yymv665
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceInstanceCondition(v []InstanceCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv672 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy673 := &yyv672
		yy673.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceInstanceCondition(v *[]InstanceCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv674 := *v
	yyh674, yyl674 := z.DecSliceHelperStart()
	var yyc674 bool
	if yyl674 == 0 {
		if yyv674 == nil {
			yyv674 = []InstanceCondition{}
			yyc674 = true
		} else if len(yyv674) != 0 {
			yyv674 = yyv674[:0]
			yyc674 = true
		}
	} else if yyl674 > 0 {
		var yyrr674, yyrl674 int
		var yyrt674 bool
		if yyl674 > cap(yyv674) {

			yyrg674 := len(yyv674) > 0
			yyv2674 := yyv674
			yyrl674, yyrt674 = z.DecInferLen(yyl674, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt674 {
				if yyrl674 <= cap(yyv674) {
					yyv674 = yyv674[:yyrl674]
				} else {
					yyv674 = make([]InstanceCondition, yyrl674)
				}
			} else {
				yyv674 = make([]InstanceCondition, yyrl674)
			}
			yyc674 = true
			yyrr674 = len(yyv674)
			if yyrg674 {
				copy(yyv674, yyv2674)
			}
		} else if yyl674 != len(yyv674) {
			yyv674 = yyv674[:yyl674]
			yyc674 = true
		}
		yyj674 := 0
		for ; yyj674 < yyrr674; yyj674++ {
			yyh674.ElemContainerState(yyj674)
			if r.TryDecodeAsNil() {
				yyv674[yyj674] = InstanceCondition{}
			} else {
				yyv675 := &yyv674[yyj674]
				yyv675.CodecDecodeSelf(d)
			}

		}
		if yyrt674 {
			for ; yyj674 < yyl674; yyj674++ {
				yyv674 = append(yyv674, InstanceCondition{})
				yyh674.ElemContainerState(yyj674)
				if r.TryDecodeAsNil() {
					yyv674[yyj674] = InstanceCondition{}
				} else {
					yyv676 := &yyv674[yyj674]
					yyv676.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj674 := 0
		for ; !r.CheckBreak(); yyj674++ {

			if yyj674 >= len(yyv674) {
				yyv674 = append(yyv674, InstanceCondition{}) // var yyz674 InstanceCondition
				yyc674 = true
			}
			yyh674.ElemContainerState(yyj674)
			if yyj674 < len(yyv674) {
				if r.TryDecodeAsNil() {
					yyv674[yyj674] = InstanceCondition{}
				} else {
					yyv677 := &yyv674[yyj674]
					yyv677.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj674 < len(yyv674) {
			yyv674 = yyv674[:yyj674]
			yyc674 = true
		} else if yyj674 == 0 && yyv674 == nil {
			yyv674 = []InstanceCondition{}
			yyc674 = true
		}
	}
	yyh674.End()
	if yyc674 {
		*v = yyv674
	}
}

func (x codecSelfer1234) encSliceBinding(v []Binding, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv678 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy679 := &yyv678
		yy679.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceBinding(v *[]Binding, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv680 := *v
	yyh680, yyl680 := z.DecSliceHelperStart()
	var yyc680 bool
	if yyl680 == 0 {
		if yyv680 == nil {
			yyv680 = []Binding{}
			yyc680 = true
		} else if len(yyv680) != 0 {
			yyv680 = yyv680[:0]
			yyc680 = true
		}
	} else if yyl680 > 0 {
		var yyrr680, yyrl680 int
		var yyrt680 bool
		if yyl680 > cap(yyv680) {

			yyrg680 := len(yyv680) > 0
			yyv2680 := yyv680
			yyrl680, yyrt680 = z.DecInferLen(yyl680, z.DecBasicHandle().MaxInitLen, 496)
			if yyrt680 {
				if yyrl680 <= cap(yyv680) {
					yyv680 = yyv680[:yyrl680]
				} else {
					yyv680 = make([]Binding, yyrl680)
				}
			} else {
				yyv680 = make([]Binding, yyrl680)
			}
			yyc680 = true
			yyrr680 = len(yyv680)
			if yyrg680 {
				copy(yyv680, yyv2680)
			}
		} else if yyl680 != len(yyv680) {
			yyv680 = yyv680[:yyl680]
			yyc680 = true
		}
		yyj680 := 0
		for ; yyj680 < yyrr680; yyj680++ {
			yyh680.ElemContainerState(yyj680)
			if r.TryDecodeAsNil() {
				yyv680[yyj680] = Binding{}
			} else {
				yyv681 := &yyv680[yyj680]
				yyv681.CodecDecodeSelf(d)
			}

		}
		if yyrt680 {
			for ; yyj680 < yyl680; yyj680++ {
				yyv680 = append(yyv680, Binding{})
				yyh680.ElemContainerState(yyj680)
				if r.TryDecodeAsNil() {
					yyv680[yyj680] = Binding{}
				} else {
					yyv682 := &yyv680[yyj680]
					yyv682.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj680 := 0
		for ; !r.CheckBreak(); yyj680++ {

			if yyj680 >= len(yyv680) {
				yyv680 = append(yyv680, Binding{}) // var yyz680 Binding
				yyc680 = true
			}
			yyh680.ElemContainerState(yyj680)
			if yyj680 < len(yyv680) {
				if r.TryDecodeAsNil() {
					yyv680[yyj680] = Binding{}
				} else {
					yyv683 := &yyv680[yyj680]
					yyv683.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj680 < len(yyv680) {
			yyv680 = yyv680[:yyj680]
			yyc680 = true
		} else if yyj680 == 0 && yyv680 == nil {
			yyv680 = []Binding{}
			yyc680 = true
		}
	}
	yyh680.End()
	if yyc680 {
		*v = yyv680
	}
}

func (x codecSelfer1234) encSliceBindingCondition(v []BindingCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv684 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy685 := &yyv684
		yy685.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceBindingCondition(v *[]BindingCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv686 := *v
	yyh686, yyl686 := z.DecSliceHelperStart()
	var yyc686 bool
	if yyl686 == 0 {
		if yyv686 == nil {
			yyv686 = []BindingCondition{}
			yyc686 = true
		} else if len(yyv686) != 0 {
			yyv686 = yyv686[:0]
			yyc686 = true
		}
	} else if yyl686 > 0 {
		var yyrr686, yyrl686 int
		var yyrt686 bool
		if yyl686 > cap(yyv686) {

			yyrg686 := len(yyv686) > 0
			yyv2686 := yyv686
			yyrl686, yyrt686 = z.DecInferLen(yyl686, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt686 {
				if yyrl686 <= cap(yyv686) {
					yyv686 = yyv686[:yyrl686]
				} else {
					yyv686 = make([]BindingCondition, yyrl686)
				}
			} else {
				yyv686 = make([]BindingCondition, yyrl686)
			}
			yyc686 = true
			yyrr686 = len(yyv686)
			if yyrg686 {
				copy(yyv686, yyv2686)
			}
		} else if yyl686 != len(yyv686) {
			yyv686 = yyv686[:yyl686]
			yyc686 = true
		}
		yyj686 := 0
		for ; yyj686 < yyrr686; yyj686++ {
			yyh686.ElemContainerState(yyj686)
			if r.TryDecodeAsNil() {
				yyv686[yyj686] = BindingCondition{}
			} else {
				yyv687 := &yyv686[yyj686]
				yyv687.CodecDecodeSelf(d)
			}

		}
		if yyrt686 {
			for ; yyj686 < yyl686; yyj686++ {
				yyv686 = append(yyv686, BindingCondition{})
				yyh686.ElemContainerState(yyj686)
				if r.TryDecodeAsNil() {
					yyv686[yyj686] = BindingCondition{}
				} else {
					yyv688 := &yyv686[yyj686]
					yyv688.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj686 := 0
		for ; !r.CheckBreak(); yyj686++ {

			if yyj686 >= len(yyv686) {
				yyv686 = append(yyv686, BindingCondition{}) // var yyz686 BindingCondition
				yyc686 = true
			}
			yyh686.ElemContainerState(yyj686)
			if yyj686 < len(yyv686) {
				if r.TryDecodeAsNil() {
					yyv686[yyj686] = BindingCondition{}
				} else {
					yyv689 := &yyv686[yyj686]
					yyv689.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj686 < len(yyv686) {
			yyv686 = yyv686[:yyj686]
			yyc686 = true
		} else if yyj686 == 0 && yyv686 == nil {
			yyv686 = []BindingCondition{}
			yyc686 = true
		}
	}
	yyh686.End()
	if yyc686 {
		*v = yyv686
	}
}
